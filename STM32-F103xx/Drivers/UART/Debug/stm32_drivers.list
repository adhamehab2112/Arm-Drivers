
stm32_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000091c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a4c  08000a4c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a4c  08000a4c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000a4c  08000a4c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a4c  08000a4c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a4c  08000a4c  00010a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a50  08000a50  00010a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000018  08000a6c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08000a6c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f54  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009bd  00000000  00000000  00023f95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000acc  00000000  00000000  00024952  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001d0  00000000  00000000  00025420  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  000255f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000009ef  00000000  00000000  00025768  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000254a  00000000  00000000  00026157  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000097c7  00000000  00000000  000286a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00031e68  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005a8  00000000  00000000  00031ee4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000018 	.word	0x20000018
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a34 	.word	0x08000a34

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000001c 	.word	0x2000001c
 800016c:	08000a34 	.word	0x08000a34

08000170 <EXTI0_IRQHandler>:
 * 			    ISR FUNCTRIONS						   *
 * 				                                       *
 *======================================================
 */
void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	// CLear by write 1 into pending register
	EXTI->EXTI_PR |= 1<<0 ;
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ_CALL
	Global_ptr_callBack[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3

}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000038 	.word	0x20000038

08000194 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	// CLear by write 1 into pending register
	EXTI->EXTI_PR |= 1<<1 ;
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ_CALL
	Global_ptr_callBack[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000038 	.word	0x20000038

080001b8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	// CLear by write 1 into pending register
	EXTI->EXTI_PR |= 1<<2 ;
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ_CALL
	Global_ptr_callBack[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000038 	.word	0x20000038

080001dc <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	// CLear by write 1 into pending register
	EXTI->EXTI_PR |= 1<<3 ;
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ_CALL
	Global_ptr_callBack[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000038 	.word	0x20000038

08000200 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	// CLear by write 1 into pending register
	EXTI->EXTI_PR |= 1<<4 ;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ_CALL
	Global_ptr_callBack[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000038 	.word	0x20000038

08000224 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if(EXTI->EXTI_PR & 1<<5){EXTI->EXTI_PR |= 1<<5 ; Global_ptr_callBack[5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<6){EXTI->EXTI_PR |= 1<<6 ; Global_ptr_callBack[6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<7){EXTI->EXTI_PR |= 1<<7 ; Global_ptr_callBack[7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<8){EXTI->EXTI_PR |= 1<<8 ; Global_ptr_callBack[8]();}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<9){EXTI->EXTI_PR |= 1<<9 ; Global_ptr_callBack[9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000038 	.word	0x20000038

080002cc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if(EXTI->EXTI_PR & 1<<10){EXTI->EXTI_PR |= 1<<10 ; Global_ptr_callBack[10]();}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<11){EXTI->EXTI_PR |= 1<<11 ; Global_ptr_callBack[11]();}
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<12){EXTI->EXTI_PR |= 1<<12 ; Global_ptr_callBack[12]();}
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<13){EXTI->EXTI_PR |= 1<<13 ; Global_ptr_callBack[13]();}
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<14){EXTI->EXTI_PR |= 1<<14 ; Global_ptr_callBack[14]();}
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<15){EXTI->EXTI_PR |= 1<<15 ; Global_ptr_callBack[15]();}
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000038 	.word	0x20000038

08000390 <Private_Get_CRLH_Position>:
 * 			Private Functions 					       *
 * 				                                       *
 *======================================================
 */
uint8_t Private_Get_CRLH_Position(uint16_t pinNumber)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b0f      	cmp	r3, #15
 800039e:	d843      	bhi.n	8000428 <Private_Get_CRLH_Position+0x98>
 80003a0:	a201      	add	r2, pc, #4	; (adr r2, 80003a8 <Private_Get_CRLH_Position+0x18>)
 80003a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a6:	bf00      	nop
 80003a8:	080003e9 	.word	0x080003e9
 80003ac:	080003ed 	.word	0x080003ed
 80003b0:	080003f1 	.word	0x080003f1
 80003b4:	080003f5 	.word	0x080003f5
 80003b8:	080003f9 	.word	0x080003f9
 80003bc:	080003fd 	.word	0x080003fd
 80003c0:	08000401 	.word	0x08000401
 80003c4:	08000405 	.word	0x08000405
 80003c8:	08000409 	.word	0x08000409
 80003cc:	0800040d 	.word	0x0800040d
 80003d0:	08000411 	.word	0x08000411
 80003d4:	08000415 	.word	0x08000415
 80003d8:	08000419 	.word	0x08000419
 80003dc:	0800041d 	.word	0x0800041d
 80003e0:	08000421 	.word	0x08000421
 80003e4:	08000425 	.word	0x08000425
	{
	case GPIO_PIN0 :
		return 0	;
 80003e8:	2300      	movs	r3, #0
 80003ea:	e01e      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN1  :
		return 4	;
 80003ec:	2304      	movs	r3, #4
 80003ee:	e01c      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN2 :
		return 8	;
 80003f0:	2308      	movs	r3, #8
 80003f2:	e01a      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN3 :
		return 12	;
 80003f4:	230c      	movs	r3, #12
 80003f6:	e018      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN4 :
		return 16	;
 80003f8:	2310      	movs	r3, #16
 80003fa:	e016      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;

	case GPIO_PIN5 :
		return 20	;
 80003fc:	2314      	movs	r3, #20
 80003fe:	e014      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN6 :
		return 24	;
 8000400:	2318      	movs	r3, #24
 8000402:	e012      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN7 :
		return 28	;
 8000404:	231c      	movs	r3, #28
 8000406:	e010      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN8 :
		return 0	;
 8000408:	2300      	movs	r3, #0
 800040a:	e00e      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN9  :
		return 4	;
 800040c:	2304      	movs	r3, #4
 800040e:	e00c      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN10 :
		return 8	;
 8000410:	2308      	movs	r3, #8
 8000412:	e00a      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN11 :
		return 12	;
 8000414:	230c      	movs	r3, #12
 8000416:	e008      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN12 :
		return 16	;
 8000418:	2310      	movs	r3, #16
 800041a:	e006      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;

	case GPIO_PIN13 :
		return 20	;
 800041c:	2314      	movs	r3, #20
 800041e:	e004      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN14 :
		return 24	;
 8000420:	2318      	movs	r3, #24
 8000422:	e002      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN15 :
		return 28	;
 8000424:	231c      	movs	r3, #28
 8000426:	e000      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	default 		:
		return -1	;
 8000428:	23ff      	movs	r3, #255	; 0xff
		break		;


	}
}
 800042a:	4618      	mov	r0, r3
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr

08000434 <MCAL_GPIO_Init>:
* @retval 		: none
* Note			: remember that according to our LQFP48 package we only have ports : A-B-C-D
*===================================================================*/

void MCAL_GPIO_Init(GPIOx_Registers_t *GPIOx ,GPIO_Pin_Config_t *Pin_Config )
{
 8000434:	b590      	push	{r4, r7, lr}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	6039      	str	r1, [r7, #0]
	volatile uint32_t *configReg = NULL ;
 800043e:	2300      	movs	r3, #0
 8000440:	60bb      	str	r3, [r7, #8]
	uint8_t pinMode = 0 ;
 8000442:	2300      	movs	r3, #0
 8000444:	73fb      	strb	r3, [r7, #15]
	configReg = (Pin_Config->GPIO_PIN_NUMBER >GPIO_PIN7)? &GPIOx->GPIOx_CRH:&GPIOx->GPIOx_CRL;
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	881b      	ldrh	r3, [r3, #0]
 800044a:	2b07      	cmp	r3, #7
 800044c:	d902      	bls.n	8000454 <MCAL_GPIO_Init+0x20>
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	3304      	adds	r3, #4
 8000452:	e000      	b.n	8000456 <MCAL_GPIO_Init+0x22>
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	60bb      	str	r3, [r7, #8]
	// clear MODEx and CNFx
	*configReg &= ~(0xF<<Private_Get_CRLH_Position(Pin_Config->GPIO_PIN_NUMBER));
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	881b      	ldrh	r3, [r3, #0]
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ff97 	bl	8000390 <Private_Get_CRLH_Position>
 8000462:	4603      	mov	r3, r0
 8000464:	461a      	mov	r2, r3
 8000466:	230f      	movs	r3, #15
 8000468:	4093      	lsls	r3, r2
 800046a:	43da      	mvns	r2, r3
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	401a      	ands	r2, r3
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	601a      	str	r2, [r3, #0]
	//check if any output mode selected
	if(Pin_Config->GPIO_PIN_MODE == GPIO_OUTPUT_OD ||Pin_Config->GPIO_PIN_MODE == GPIO_OUTPUT_PP || Pin_Config->GPIO_PIN_MODE == AFIO_OUTPUT_OD || Pin_Config->GPIO_PIN_MODE == AFIO_OUTPUT_PP )
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	789b      	ldrb	r3, [r3, #2]
 800047a:	2b05      	cmp	r3, #5
 800047c:	d00b      	beq.n	8000496 <MCAL_GPIO_Init+0x62>
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	789b      	ldrb	r3, [r3, #2]
 8000482:	2b04      	cmp	r3, #4
 8000484:	d007      	beq.n	8000496 <MCAL_GPIO_Init+0x62>
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	789b      	ldrb	r3, [r3, #2]
 800048a:	2b07      	cmp	r3, #7
 800048c:	d003      	beq.n	8000496 <MCAL_GPIO_Init+0x62>
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	789b      	ldrb	r3, [r3, #2]
 8000492:	2b06      	cmp	r3, #6
 8000494:	d10e      	bne.n	80004b4 <MCAL_GPIO_Init+0x80>
	{
		//define MODEx and CNFx
		pinMode = ((((Pin_Config->GPIO_PIN_MODE - 4)<<2) | (Pin_Config->GPIO_OUT_SPEED)) & 0x0F);
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	789b      	ldrb	r3, [r3, #2]
 800049a:	3b04      	subs	r3, #4
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	b25a      	sxtb	r2, r3
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	78db      	ldrb	r3, [r3, #3]
 80004a4:	b25b      	sxtb	r3, r3
 80004a6:	4313      	orrs	r3, r2
 80004a8:	b25b      	sxtb	r3, r3
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	f003 030f 	and.w	r3, r3, #15
 80004b0:	73fb      	strb	r3, [r7, #15]
 80004b2:	e032      	b.n	800051a <MCAL_GPIO_Init+0xe6>

	}
	//check if any input mode selected
	else
	{
		if(Pin_Config->GPIO_PIN_MODE == GPIO_INPUT_PUP || Pin_Config->GPIO_PIN_MODE == GPIO_INPUT_PDWN)
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	789b      	ldrb	r3, [r3, #2]
 80004b8:	2b02      	cmp	r3, #2
 80004ba:	d003      	beq.n	80004c4 <MCAL_GPIO_Init+0x90>
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	789b      	ldrb	r3, [r3, #2]
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d11c      	bne.n	80004fe <MCAL_GPIO_Init+0xca>
		{
			pinMode =((GPIO_INPUT_PUP<<2)|0x0)&0x0F ;
 80004c4:	2308      	movs	r3, #8
 80004c6:	73fb      	strb	r3, [r7, #15]
			if(Pin_Config->GPIO_PIN_MODE == GPIO_INPUT_PUP)
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	789b      	ldrb	r3, [r3, #2]
 80004cc:	2b02      	cmp	r3, #2
 80004ce:	d10a      	bne.n	80004e6 <MCAL_GPIO_Init+0xb2>
				(GPIOx->GPIOx_ODR) |= (1<<Pin_Config->GPIO_PIN_NUMBER);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	683a      	ldr	r2, [r7, #0]
 80004d6:	8812      	ldrh	r2, [r2, #0]
 80004d8:	4611      	mov	r1, r2
 80004da:	2201      	movs	r2, #1
 80004dc:	408a      	lsls	r2, r1
 80004de:	431a      	orrs	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	60da      	str	r2, [r3, #12]
			if(Pin_Config->GPIO_PIN_MODE == GPIO_INPUT_PUP)
 80004e4:	e019      	b.n	800051a <MCAL_GPIO_Init+0xe6>
			else
				(GPIOx->GPIOx_ODR) &= ~(1<<Pin_Config->GPIO_PIN_NUMBER);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	68db      	ldr	r3, [r3, #12]
 80004ea:	683a      	ldr	r2, [r7, #0]
 80004ec:	8812      	ldrh	r2, [r2, #0]
 80004ee:	4611      	mov	r1, r2
 80004f0:	2201      	movs	r2, #1
 80004f2:	408a      	lsls	r2, r1
 80004f4:	43d2      	mvns	r2, r2
 80004f6:	401a      	ands	r2, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	60da      	str	r2, [r3, #12]
			if(Pin_Config->GPIO_PIN_MODE == GPIO_INPUT_PUP)
 80004fc:	e00d      	b.n	800051a <MCAL_GPIO_Init+0xe6>
		}
		else if(Pin_Config->GPIO_PIN_MODE == AFIO_INPUT)
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	789b      	ldrb	r3, [r3, #2]
 8000502:	2b08      	cmp	r3, #8
 8000504:	d102      	bne.n	800050c <MCAL_GPIO_Init+0xd8>
		{
			pinMode =((GPIO_INPUT_FLOAT<<2)|0x0)&0x0F ;
 8000506:	2304      	movs	r3, #4
 8000508:	73fb      	strb	r3, [r7, #15]
 800050a:	e006      	b.n	800051a <MCAL_GPIO_Init+0xe6>
		}
		else
		{
			pinMode =(((Pin_Config->GPIO_PIN_MODE)<<2)  | 0x0)&0x0F ;
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	789b      	ldrb	r3, [r3, #2]
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	b2db      	uxtb	r3, r3
 8000514:	f003 030f 	and.w	r3, r3, #15
 8000518:	73fb      	strb	r3, [r7, #15]

		}
	}
	(*configReg) |= (pinMode<<Private_Get_CRLH_Position(Pin_Config->GPIO_PIN_NUMBER));
 800051a:	7bfc      	ldrb	r4, [r7, #15]
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff ff35 	bl	8000390 <Private_Get_CRLH_Position>
 8000526:	4603      	mov	r3, r0
 8000528:	fa04 f203 	lsl.w	r2, r4, r3
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	431a      	orrs	r2, r3
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	601a      	str	r2, [r3, #0]
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	bd90      	pop	{r4, r7, pc}
	...

08000540 <MCAL_RCC_Get_PCLK1_Freq>:
#include"RCC.h"
uint8_t Priv_APBprescaler[8] =  {0,0,0,0,1,2,3,4};
uint8_t Priv_AHBprescaler[16] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};

uint32_t MCAL_RCC_Get_PCLK1_Freq()
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	return (MCAL_RCC_Get_HCLK_Freq()>>Priv_APBprescaler[(RCC->RCC_CFGR>>8)&0b111]);
 8000544:	f000 f824 	bl	8000590 <MCAL_RCC_Get_HCLK_Freq>
 8000548:	4601      	mov	r1, r0
 800054a:	4b05      	ldr	r3, [pc, #20]	; (8000560 <MCAL_RCC_Get_PCLK1_Freq+0x20>)
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	0a1b      	lsrs	r3, r3, #8
 8000550:	f003 0307 	and.w	r3, r3, #7
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <MCAL_RCC_Get_PCLK1_Freq+0x24>)
 8000556:	5cd3      	ldrb	r3, [r2, r3]
 8000558:	fa21 f303 	lsr.w	r3, r1, r3
}
 800055c:	4618      	mov	r0, r3
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40021000 	.word	0x40021000
 8000564:	20000000 	.word	0x20000000

08000568 <MCAL_RCC_Get_PCLK2_Freq>:
uint32_t MCAL_RCC_Get_PCLK2_Freq()
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	return (MCAL_RCC_Get_HCLK_Freq()>>Priv_APBprescaler[(RCC->RCC_CFGR>>11)&0b111]);
 800056c:	f000 f810 	bl	8000590 <MCAL_RCC_Get_HCLK_Freq>
 8000570:	4601      	mov	r1, r0
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <MCAL_RCC_Get_PCLK2_Freq+0x20>)
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	0adb      	lsrs	r3, r3, #11
 8000578:	f003 0307 	and.w	r3, r3, #7
 800057c:	4a03      	ldr	r2, [pc, #12]	; (800058c <MCAL_RCC_Get_PCLK2_Freq+0x24>)
 800057e:	5cd3      	ldrb	r3, [r2, r3]
 8000580:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000584:	4618      	mov	r0, r3
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40021000 	.word	0x40021000
 800058c:	20000000 	.word	0x20000000

08000590 <MCAL_RCC_Get_HCLK_Freq>:
uint32_t MCAL_RCC_Get_HCLK_Freq()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	return (MCAL_RCC_Get_SYSCLK_Freq()>>Priv_AHBprescaler[(RCC->RCC_CFGR>>4)&0xF]);
 8000594:	f000 f810 	bl	80005b8 <MCAL_RCC_Get_SYSCLK_Freq>
 8000598:	4601      	mov	r1, r0
 800059a:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <MCAL_RCC_Get_HCLK_Freq+0x20>)
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	091b      	lsrs	r3, r3, #4
 80005a0:	f003 030f 	and.w	r3, r3, #15
 80005a4:	4a03      	ldr	r2, [pc, #12]	; (80005b4 <MCAL_RCC_Get_HCLK_Freq+0x24>)
 80005a6:	5cd3      	ldrb	r3, [r2, r3]
 80005a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000
 80005b4:	20000008 	.word	0x20000008

080005b8 <MCAL_RCC_Get_SYSCLK_Freq>:
uint32_t MCAL_RCC_Get_SYSCLK_Freq()
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
	switch((RCC->RCC_CFGR>>2)&0b11)
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <MCAL_RCC_Get_SYSCLK_Freq+0x30>)
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	089b      	lsrs	r3, r3, #2
 80005c2:	f003 0303 	and.w	r3, r3, #3
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d006      	beq.n	80005d8 <MCAL_RCC_Get_SYSCLK_Freq+0x20>
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d302      	bcc.n	80005d4 <MCAL_RCC_Get_SYSCLK_Freq+0x1c>
 80005ce:	2b02      	cmp	r3, #2
 80005d0:	d004      	beq.n	80005dc <MCAL_RCC_Get_SYSCLK_Freq+0x24>
 80005d2:	e005      	b.n	80005e0 <MCAL_RCC_Get_SYSCLK_Freq+0x28>
		{
		case 0 :
			return HSI_CLK ;
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <MCAL_RCC_Get_SYSCLK_Freq+0x34>)
 80005d6:	e003      	b.n	80005e0 <MCAL_RCC_Get_SYSCLK_Freq+0x28>
			break ;
		case 1 :
			return HSI_CLK ;
 80005d8:	4b04      	ldr	r3, [pc, #16]	; (80005ec <MCAL_RCC_Get_SYSCLK_Freq+0x34>)
 80005da:	e001      	b.n	80005e0 <MCAL_RCC_Get_SYSCLK_Freq+0x28>
			break ;
		case 2 :
			return 16000000 ;
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <MCAL_RCC_Get_SYSCLK_Freq+0x38>)
 80005de:	e7ff      	b.n	80005e0 <MCAL_RCC_Get_SYSCLK_Freq+0x28>
			break ;

		}
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	40021000 	.word	0x40021000
 80005ec:	007a1200 	.word	0x007a1200
 80005f0:	00f42400 	.word	0x00f42400

080005f4 <MCAL_USART_Init>:
// Note this driver Support only one UART at a time if you want to support all uarts u can create an array of configurations
USART_Config_t *Gl_Config = NULL ;

//*~*~*~**~*~*~**~*~*~**~*~*~*
void MCAL_USART_Init(USART_Registers_t *USARTx , USART_Config_t *config )
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
	Gl_Config = config ;
 80005fe:	4a5b      	ldr	r2, [pc, #364]	; (800076c <MCAL_USART_Init+0x178>)
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	6013      	str	r3, [r2, #0]
//-------------------1-Enable clock for USART------------------------------------------
	if(USARTx == USART1)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a5a      	ldr	r2, [pc, #360]	; (8000770 <MCAL_USART_Init+0x17c>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d106      	bne.n	800061a <MCAL_USART_Init+0x26>
		RCC_USART1_CLK_EN();
 800060c:	4b59      	ldr	r3, [pc, #356]	; (8000774 <MCAL_USART_Init+0x180>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a58      	ldr	r2, [pc, #352]	; (8000774 <MCAL_USART_Init+0x180>)
 8000612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	e014      	b.n	8000644 <MCAL_USART_Init+0x50>
	else if(USARTx == USART2)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a56      	ldr	r2, [pc, #344]	; (8000778 <MCAL_USART_Init+0x184>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d106      	bne.n	8000630 <MCAL_USART_Init+0x3c>
		RCC_USART2_CLK_EN();
 8000622:	4b54      	ldr	r3, [pc, #336]	; (8000774 <MCAL_USART_Init+0x180>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	4a53      	ldr	r2, [pc, #332]	; (8000774 <MCAL_USART_Init+0x180>)
 8000628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800062c:	61d3      	str	r3, [r2, #28]
 800062e:	e009      	b.n	8000644 <MCAL_USART_Init+0x50>
	else if(USARTx == USART3)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a52      	ldr	r2, [pc, #328]	; (800077c <MCAL_USART_Init+0x188>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d105      	bne.n	8000644 <MCAL_USART_Init+0x50>
		RCC_USART3_CLK_EN();
 8000638:	4b4e      	ldr	r3, [pc, #312]	; (8000774 <MCAL_USART_Init+0x180>)
 800063a:	69db      	ldr	r3, [r3, #28]
 800063c:	4a4d      	ldr	r2, [pc, #308]	; (8000774 <MCAL_USART_Init+0x180>)
 800063e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000642:	61d3      	str	r3, [r2, #28]
//-------------------2-Enable USART MODULE------------------------------------------
	USARTx->USART_CR1 |= 1<<13 ;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	60da      	str	r2, [r3, #12]
//-------------------3-Enable USART Tx/Rx-------------------------------------------
	USARTx->USART_CR1 |= Gl_Config->USART_MODE ;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	4a45      	ldr	r2, [pc, #276]	; (800076c <MCAL_USART_Init+0x178>)
 8000656:	6812      	ldr	r2, [r2, #0]
 8000658:	7812      	ldrb	r2, [r2, #0]
 800065a:	431a      	orrs	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	60da      	str	r2, [r3, #12]
//-------------------4-Payload Length-----------------------------------------------
	USARTx->USART_CR1 |= Gl_Config->USART_PAYLOAD_LENGTH ;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	4a41      	ldr	r2, [pc, #260]	; (800076c <MCAL_USART_Init+0x178>)
 8000666:	6812      	ldr	r2, [r2, #0]
 8000668:	7a12      	ldrb	r2, [r2, #8]
 800066a:	431a      	orrs	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	60da      	str	r2, [r3, #12]
//-------------------5-Parity Config------------------------------------------------
	USARTx->USART_CR1 |= Gl_Config->USART_PARITY ;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	4a3d      	ldr	r2, [pc, #244]	; (800076c <MCAL_USART_Init+0x178>)
 8000676:	6812      	ldr	r2, [r2, #0]
 8000678:	7a52      	ldrb	r2, [r2, #9]
 800067a:	431a      	orrs	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	60da      	str	r2, [r3, #12]
//-------------------6-Stop Bits Config------------------------------------------------
	USARTx->USART_CR2 |= Gl_Config->USART_STOP_BITS ;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	691b      	ldr	r3, [r3, #16]
 8000684:	4a39      	ldr	r2, [pc, #228]	; (800076c <MCAL_USART_Init+0x178>)
 8000686:	6812      	ldr	r2, [r2, #0]
 8000688:	7a92      	ldrb	r2, [r2, #10]
 800068a:	431a      	orrs	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	611a      	str	r2, [r3, #16]
//-------------------7-Stop Bits Config------------------------------------------------
	USARTx->USART_CR3 = Gl_Config->USART_HW_FLOW_CONTROL;
 8000690:	4b36      	ldr	r3, [pc, #216]	; (800076c <MCAL_USART_Init+0x178>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	7adb      	ldrb	r3, [r3, #11]
 8000696:	461a      	mov	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	615a      	str	r2, [r3, #20]
//-------------------8-BaudRate Configuration------------------------------------------
	uint32_t BRR , PCLK ;
	if(USARTx == USART1)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a34      	ldr	r2, [pc, #208]	; (8000770 <MCAL_USART_Init+0x17c>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d103      	bne.n	80006ac <MCAL_USART_Init+0xb8>
	{
		PCLK = MCAL_RCC_Get_PCLK2_Freq();
 80006a4:	f7ff ff60 	bl	8000568 <MCAL_RCC_Get_PCLK2_Freq>
 80006a8:	60f8      	str	r0, [r7, #12]
 80006aa:	e002      	b.n	80006b2 <MCAL_USART_Init+0xbe>
	}
	else
	{
		PCLK = MCAL_RCC_Get_PCLK1_Freq();
 80006ac:	f7ff ff48 	bl	8000540 <MCAL_RCC_Get_PCLK1_Freq>
 80006b0:	60f8      	str	r0, [r7, #12]
	}
	BRR = USART_BRR_REG(PCLK,Gl_Config->USART_BAUDRATE);
 80006b2:	4b2e      	ldr	r3, [pc, #184]	; (800076c <MCAL_USART_Init+0x178>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	011b      	lsls	r3, r3, #4
 80006ba:	68fa      	ldr	r2, [r7, #12]
 80006bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c0:	0119      	lsls	r1, r3, #4
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	4613      	mov	r3, r2
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	4413      	add	r3, r2
 80006ca:	009a      	lsls	r2, r3, #2
 80006cc:	441a      	add	r2, r3
 80006ce:	4b27      	ldr	r3, [pc, #156]	; (800076c <MCAL_USART_Init+0x178>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80006da:	4b24      	ldr	r3, [pc, #144]	; (800076c <MCAL_USART_Init+0x178>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	011b      	lsls	r3, r3, #4
 80006e2:	68f8      	ldr	r0, [r7, #12]
 80006e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80006e8:	2064      	movs	r0, #100	; 0x64
 80006ea:	fb00 f303 	mul.w	r3, r0, r3
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	011b      	lsls	r3, r3, #4
 80006f2:	4a23      	ldr	r2, [pc, #140]	; (8000780 <MCAL_USART_Init+0x18c>)
 80006f4:	fba2 2303 	umull	r2, r3, r2, r3
 80006f8:	095b      	lsrs	r3, r3, #5
 80006fa:	f003 030f 	and.w	r3, r3, #15
 80006fe:	430b      	orrs	r3, r1
 8000700:	60bb      	str	r3, [r7, #8]
	USARTx->USART_BRR = BRR ;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	68ba      	ldr	r2, [r7, #8]
 8000706:	609a      	str	r2, [r3, #8]
//-------------------9-USART INT enable/disable------------------------------------------
	if(Gl_Config->USART_IRQ_ENABLE != USART_IRQ_DIS)
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <MCAL_USART_Init+0x178>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	7b1b      	ldrb	r3, [r3, #12]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d027      	beq.n	8000762 <MCAL_USART_Init+0x16e>
	{
		USARTx->USART_CR1 |= Gl_Config->USART_IRQ_ENABLE ;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	4a15      	ldr	r2, [pc, #84]	; (800076c <MCAL_USART_Init+0x178>)
 8000718:	6812      	ldr	r2, [r2, #0]
 800071a:	7b12      	ldrb	r2, [r2, #12]
 800071c:	431a      	orrs	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	60da      	str	r2, [r3, #12]
//-------------------10-NVIC INT enable/disable------------------------------------------
			if(USARTx == USART1)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MCAL_USART_Init+0x17c>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d106      	bne.n	8000738 <MCAL_USART_Init+0x144>
			{
				NVIC_IRQ37_USART1_EN();
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MCAL_USART_Init+0x190>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a15      	ldr	r2, [pc, #84]	; (8000784 <MCAL_USART_Init+0x190>)
 8000730:	f043 0320 	orr.w	r3, r3, #32
 8000734:	6013      	str	r3, [r2, #0]
				NVIC_IRQ39_USART3_EN();
			}
	}


}
 8000736:	e014      	b.n	8000762 <MCAL_USART_Init+0x16e>
			else if(USARTx == USART2)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a0f      	ldr	r2, [pc, #60]	; (8000778 <MCAL_USART_Init+0x184>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d106      	bne.n	800074e <MCAL_USART_Init+0x15a>
				NVIC_IRQ38_USART2_EN();
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MCAL_USART_Init+0x190>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a0f      	ldr	r2, [pc, #60]	; (8000784 <MCAL_USART_Init+0x190>)
 8000746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800074a:	6013      	str	r3, [r2, #0]
}
 800074c:	e009      	b.n	8000762 <MCAL_USART_Init+0x16e>
			else if(USARTx == USART3)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a0a      	ldr	r2, [pc, #40]	; (800077c <MCAL_USART_Init+0x188>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d105      	bne.n	8000762 <MCAL_USART_Init+0x16e>
				NVIC_IRQ39_USART3_EN();
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MCAL_USART_Init+0x190>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <MCAL_USART_Init+0x190>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000760:	6013      	str	r3, [r2, #0]
}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000034 	.word	0x20000034
 8000770:	40013800 	.word	0x40013800
 8000774:	40021000 	.word	0x40021000
 8000778:	40004400 	.word	0x40004400
 800077c:	40004800 	.word	0x40004800
 8000780:	51eb851f 	.word	0x51eb851f
 8000784:	e000e104 	.word	0xe000e104

08000788 <MCAL_USART_Send_Data>:
		RCC_USART3_CLK_DIS();
		NVIC_IRQ39_USART3_DIS();
	}
}
void MCAL_USART_Send_Data(USART_Registers_t *USARTx , uint16_t *dataBuffer ,enum PollingMechanism PoolingEn)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	4613      	mov	r3, r2
 8000794:	71fb      	strb	r3, [r7, #7]
	// wait until TxE is set {according to TRM procedure } -> at polling mechanism
	if( PoolingEn == Polling_Enable)
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d106      	bne.n	80007aa <MCAL_USART_Send_Data+0x22>
	{
		while(!(USARTx->USART_SR&(1<<7))) ;
 800079c:	bf00      	nop
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d0f9      	beq.n	800079e <MCAL_USART_Send_Data+0x16>
	{
		USARTx->USART_DR = (*dataBuffer & (uint16_t)0x1FF) ; // 9bits
	}
	else
	{
		USARTx->USART_DR = (*dataBuffer & (uint16_t)0xFF) ; // 8bits
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	605a      	str	r2, [r3, #4]
	}

}
 80007b4:	bf00      	nop
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
	...

080007c0 <MCAL_USART_Recive_Data>:
void MCAL_USART_Wait_TC(USART_Registers_t *USARTx)
{
	while(!GET_BIT(USARTx->USART_SR,6)); // WAIT UNTIL ALL DATA TO BE SEND
}
void MCAL_USART_Recive_Data(USART_Registers_t *USARTx , uint16_t *dataBuffer ,enum PollingMechanism PoolingEn)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	4613      	mov	r3, r2
 80007cc:	71fb      	strb	r3, [r7, #7]
	// wait until RXNE is set {according to TRM procedure } -> at polling mechanism
		if( PoolingEn == Polling_Enable)
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d106      	bne.n	80007e2 <MCAL_USART_Recive_Data+0x22>
		{
			while(!(USARTx->USART_SR&(1<<5))) ;
 80007d4:	bf00      	nop
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f003 0320 	and.w	r3, r3, #32
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d0f9      	beq.n	80007d6 <MCAL_USART_Recive_Data+0x16>
				else
					*((uint16_t *)dataBuffer) = (USARTx->USART_DR & (uint8_t)0xFF );
		}
		else
		{
			if(Gl_Config->USART_PARITY == USART_PARITY_DIS)
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MCAL_USART_Recive_Data+0x54>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	7a5b      	ldrb	r3, [r3, #9]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d105      	bne.n	80007f8 <MCAL_USART_Recive_Data+0x38>
				*((uint16_t *)dataBuffer) = USARTx->USART_DR ;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	801a      	strh	r2, [r3, #0]
			else
				*((uint16_t *)dataBuffer) = (USARTx->USART_DR & (uint8_t)0x7F );
		}

}
 80007f6:	e007      	b.n	8000808 <MCAL_USART_Recive_Data+0x48>
				*((uint16_t *)dataBuffer) = (USARTx->USART_DR & (uint8_t)0x7F );
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000802:	b29a      	uxth	r2, r3
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	801a      	strh	r2, [r3, #0]
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000034 	.word	0x20000034

08000818 <MCAL_USART_Set_GPIO_Pins>:

//Set GPIO pins -> Recomended setting for uart in TRM [PIN ALTERNATIVE TABLE]
void MCAL_USART_Set_GPIO_Pins(USART_Registers_t *USARTx)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Config_t USART_Pin_Config ;
	if(USARTx == USART1)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a2c      	ldr	r2, [pc, #176]	; (80008d4 <MCAL_USART_Set_GPIO_Pins+0xbc>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d118      	bne.n	800085a <MCAL_USART_Set_GPIO_Pins+0x42>
		//PA10 -> RX
		//PA11 -> CTS
		//PA12 -> RTS

		//1-Set Tx pin :
		USART_Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN9 ;
 8000828:	2309      	movs	r3, #9
 800082a:	81bb      	strh	r3, [r7, #12]
		USART_Pin_Config.GPIO_PIN_MODE = AFIO_OUTPUT_PP ;
 800082c:	2306      	movs	r3, #6
 800082e:	73bb      	strb	r3, [r7, #14]
		USART_Pin_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ;
 8000830:	2301      	movs	r3, #1
 8000832:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &USART_Pin_Config);
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4619      	mov	r1, r3
 800083a:	4827      	ldr	r0, [pc, #156]	; (80008d8 <MCAL_USART_Set_GPIO_Pins+0xc0>)
 800083c:	f7ff fdfa 	bl	8000434 <MCAL_GPIO_Init>
		//2-Set Rx pin :
		USART_Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN10 ;
 8000840:	230a      	movs	r3, #10
 8000842:	81bb      	strh	r3, [r7, #12]
		USART_Pin_Config.GPIO_PIN_MODE = AFIO_INPUT ;
 8000844:	2308      	movs	r3, #8
 8000846:	73bb      	strb	r3, [r7, #14]
		USART_Pin_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ;
 8000848:	2301      	movs	r3, #1
 800084a:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &USART_Pin_Config);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4619      	mov	r1, r3
 8000852:	4821      	ldr	r0, [pc, #132]	; (80008d8 <MCAL_USART_Set_GPIO_Pins+0xc0>)
 8000854:	f7ff fdee 	bl	8000434 <MCAL_GPIO_Init>
					MCAL_GPIO_Init(GPIOA, &USART_Pin_Config);
				}

	}

}
 8000858:	e038      	b.n	80008cc <MCAL_USART_Set_GPIO_Pins+0xb4>
	else if(USARTx == USART1)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a1d      	ldr	r2, [pc, #116]	; (80008d4 <MCAL_USART_Set_GPIO_Pins+0xbc>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d118      	bne.n	8000894 <MCAL_USART_Set_GPIO_Pins+0x7c>
			USART_Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN2 ;
 8000862:	2302      	movs	r3, #2
 8000864:	81bb      	strh	r3, [r7, #12]
			USART_Pin_Config.GPIO_PIN_MODE = AFIO_OUTPUT_PP ;
 8000866:	2306      	movs	r3, #6
 8000868:	73bb      	strb	r3, [r7, #14]
			USART_Pin_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ;
 800086a:	2301      	movs	r3, #1
 800086c:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &USART_Pin_Config);
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	4619      	mov	r1, r3
 8000874:	4818      	ldr	r0, [pc, #96]	; (80008d8 <MCAL_USART_Set_GPIO_Pins+0xc0>)
 8000876:	f7ff fddd 	bl	8000434 <MCAL_GPIO_Init>
			USART_Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN3 ;
 800087a:	2303      	movs	r3, #3
 800087c:	81bb      	strh	r3, [r7, #12]
			USART_Pin_Config.GPIO_PIN_MODE = AFIO_INPUT ;
 800087e:	2308      	movs	r3, #8
 8000880:	73bb      	strb	r3, [r7, #14]
			USART_Pin_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ;
 8000882:	2301      	movs	r3, #1
 8000884:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &USART_Pin_Config);
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	4619      	mov	r1, r3
 800088c:	4812      	ldr	r0, [pc, #72]	; (80008d8 <MCAL_USART_Set_GPIO_Pins+0xc0>)
 800088e:	f7ff fdd1 	bl	8000434 <MCAL_GPIO_Init>
}
 8000892:	e01b      	b.n	80008cc <MCAL_USART_Set_GPIO_Pins+0xb4>
	else if(USARTx == USART1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a0f      	ldr	r2, [pc, #60]	; (80008d4 <MCAL_USART_Set_GPIO_Pins+0xbc>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d117      	bne.n	80008cc <MCAL_USART_Set_GPIO_Pins+0xb4>
				USART_Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN10 ;
 800089c:	230a      	movs	r3, #10
 800089e:	81bb      	strh	r3, [r7, #12]
				USART_Pin_Config.GPIO_PIN_MODE = AFIO_OUTPUT_PP ;
 80008a0:	2306      	movs	r3, #6
 80008a2:	73bb      	strb	r3, [r7, #14]
				USART_Pin_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ;
 80008a4:	2301      	movs	r3, #1
 80008a6:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &USART_Pin_Config);
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	4619      	mov	r1, r3
 80008ae:	480a      	ldr	r0, [pc, #40]	; (80008d8 <MCAL_USART_Set_GPIO_Pins+0xc0>)
 80008b0:	f7ff fdc0 	bl	8000434 <MCAL_GPIO_Init>
				USART_Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN11 ;
 80008b4:	230b      	movs	r3, #11
 80008b6:	81bb      	strh	r3, [r7, #12]
				USART_Pin_Config.GPIO_PIN_MODE = AFIO_INPUT ;
 80008b8:	2308      	movs	r3, #8
 80008ba:	73bb      	strb	r3, [r7, #14]
				USART_Pin_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ;
 80008bc:	2301      	movs	r3, #1
 80008be:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &USART_Pin_Config);
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	4619      	mov	r1, r3
 80008c6:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MCAL_USART_Set_GPIO_Pins+0xc0>)
 80008c8:	f7ff fdb4 	bl	8000434 <MCAL_GPIO_Init>
}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40013800 	.word	0x40013800
 80008d8:	40010800 	.word	0x40010800

080008dc <USART1_IRQHandler>:

//=================================================================
//					      USART ISR
//=================================================================
USART1_IRQHandler()
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
	Gl_Config->call_back_ptr;
}
 80008e0:	bf00      	nop
 80008e2:	4618      	mov	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <USART2_IRQHandler>:
USART2_IRQHandler()
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
	Gl_Config->call_back_ptr;
}
 80008ee:	bf00      	nop
 80008f0:	4618      	mov	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr

080008f8 <USART3_IRQHandler>:
USART3_IRQHandler()
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
	Gl_Config->call_back_ptr;
}
 80008fc:	bf00      	nop
 80008fe:	4618      	mov	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
	...

08000908 <CLK_init>:
#include "MCAL/EXTI/EXTI.h"
#include"MCAL/RCC/RCC.h"
#include"MCAL/USART/USART.h"

void CLK_init()
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
	// Enable Clock for GPIOA
	RCC_GPIOA_CLK_EN();
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <CLK_init+0x30>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	4a09      	ldr	r2, [pc, #36]	; (8000938 <CLK_init+0x30>)
 8000912:	f043 0304 	orr.w	r3, r3, #4
 8000916:	6193      	str	r3, [r2, #24]
	// Enable Clock for GPIOB
	RCC_GPIOB_CLK_EN();
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <CLK_init+0x30>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a06      	ldr	r2, [pc, #24]	; (8000938 <CLK_init+0x30>)
 800091e:	f043 0308 	orr.w	r3, r3, #8
 8000922:	6193      	str	r3, [r2, #24]
	//RCC ENABLE FOR EXTI
	RCC_AFIO_CLK_EN();
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <CLK_init+0x30>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a03      	ldr	r2, [pc, #12]	; (8000938 <CLK_init+0x30>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	6193      	str	r3, [r2, #24]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	40021000 	.word	0x40021000

0800093c <main>:
uint8_t recived_data ;
int main()
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
	CLK_init();
 8000942:	f7ff ffe1 	bl	8000908 <CLK_init>
	USART_Config_t MyUART ;
	MyUART.USART_BAUDRATE = USART_BAUDRATE_115200 ;
 8000946:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800094a:	60bb      	str	r3, [r7, #8]
	MyUART.USART_HW_FLOW_CONTROL = USART_NO_FLOW_CONTROL ;
 800094c:	2300      	movs	r3, #0
 800094e:	73fb      	strb	r3, [r7, #15]
	MyUART.USART_IRQ_ENABLE = USART_IRQ_DIS ;
 8000950:	2300      	movs	r3, #0
 8000952:	743b      	strb	r3, [r7, #16]
	MyUART.USART_MODE = USART_RX_TX_MODE ;
 8000954:	230c      	movs	r3, #12
 8000956:	713b      	strb	r3, [r7, #4]
	MyUART.USART_PARITY = USART_PARITY_DIS ;
 8000958:	2300      	movs	r3, #0
 800095a:	737b      	strb	r3, [r7, #13]
	MyUART.USART_PAYLOAD_LENGTH = USART_PAYLOAD_8B ;
 800095c:	2300      	movs	r3, #0
 800095e:	733b      	strb	r3, [r7, #12]
	MyUART.USART_STOP_BITS = USART_ONE_STOP_BIT ;
 8000960:	2300      	movs	r3, #0
 8000962:	73bb      	strb	r3, [r7, #14]
	MyUART.call_back_ptr = NULL ;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
	MCAL_USART_Init(USART1, &MyUART);
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	4619      	mov	r1, r3
 800096c:	4808      	ldr	r0, [pc, #32]	; (8000990 <main+0x54>)
 800096e:	f7ff fe41 	bl	80005f4 <MCAL_USART_Init>
	MCAL_USART_Set_GPIO_Pins(USART1);
 8000972:	4807      	ldr	r0, [pc, #28]	; (8000990 <main+0x54>)
 8000974:	f7ff ff50 	bl	8000818 <MCAL_USART_Set_GPIO_Pins>

	while(1)
	{

		
		MCAL_USART_Recive_Data(USART1, &recived_data, Polling_Enable);
 8000978:	2201      	movs	r2, #1
 800097a:	4906      	ldr	r1, [pc, #24]	; (8000994 <main+0x58>)
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <main+0x54>)
 800097e:	f7ff ff1f 	bl	80007c0 <MCAL_USART_Recive_Data>
		MCAL_USART_Send_Data(USART1, &recived_data, Polling_Enable);
 8000982:	2201      	movs	r2, #1
 8000984:	4903      	ldr	r1, [pc, #12]	; (8000994 <main+0x58>)
 8000986:	4802      	ldr	r0, [pc, #8]	; (8000990 <main+0x54>)
 8000988:	f7ff fefe 	bl	8000788 <MCAL_USART_Send_Data>
		MCAL_USART_Recive_Data(USART1, &recived_data, Polling_Enable);
 800098c:	e7f4      	b.n	8000978 <main+0x3c>
 800098e:	bf00      	nop
 8000990:	40013800 	.word	0x40013800
 8000994:	20000074 	.word	0x20000074

08000998 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000998:	480d      	ldr	r0, [pc, #52]	; (80009d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800099a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800099c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009a2:	490d      	ldr	r1, [pc, #52]	; (80009d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <LoopForever+0xe>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b8:	4c0a      	ldr	r4, [pc, #40]	; (80009e4 <LoopForever+0x16>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009c6:	f000 f811 	bl	80009ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ca:	f7ff ffb7 	bl	800093c <main>

080009ce <LoopForever>:

LoopForever:
    b LoopForever
 80009ce:	e7fe      	b.n	80009ce <LoopForever>
  ldr   r0, =_estack
 80009d0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80009d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80009dc:	08000a54 	.word	0x08000a54
  ldr r2, =_sbss
 80009e0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80009e4:	20000078 	.word	0x20000078

080009e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC1_2_IRQHandler>
	...

080009ec <__libc_init_array>:
 80009ec:	b570      	push	{r4, r5, r6, lr}
 80009ee:	2500      	movs	r5, #0
 80009f0:	4e0c      	ldr	r6, [pc, #48]	; (8000a24 <__libc_init_array+0x38>)
 80009f2:	4c0d      	ldr	r4, [pc, #52]	; (8000a28 <__libc_init_array+0x3c>)
 80009f4:	1ba4      	subs	r4, r4, r6
 80009f6:	10a4      	asrs	r4, r4, #2
 80009f8:	42a5      	cmp	r5, r4
 80009fa:	d109      	bne.n	8000a10 <__libc_init_array+0x24>
 80009fc:	f000 f81a 	bl	8000a34 <_init>
 8000a00:	2500      	movs	r5, #0
 8000a02:	4e0a      	ldr	r6, [pc, #40]	; (8000a2c <__libc_init_array+0x40>)
 8000a04:	4c0a      	ldr	r4, [pc, #40]	; (8000a30 <__libc_init_array+0x44>)
 8000a06:	1ba4      	subs	r4, r4, r6
 8000a08:	10a4      	asrs	r4, r4, #2
 8000a0a:	42a5      	cmp	r5, r4
 8000a0c:	d105      	bne.n	8000a1a <__libc_init_array+0x2e>
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
 8000a10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a14:	4798      	blx	r3
 8000a16:	3501      	adds	r5, #1
 8000a18:	e7ee      	b.n	80009f8 <__libc_init_array+0xc>
 8000a1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a1e:	4798      	blx	r3
 8000a20:	3501      	adds	r5, #1
 8000a22:	e7f2      	b.n	8000a0a <__libc_init_array+0x1e>
 8000a24:	08000a4c 	.word	0x08000a4c
 8000a28:	08000a4c 	.word	0x08000a4c
 8000a2c:	08000a4c 	.word	0x08000a4c
 8000a30:	08000a50 	.word	0x08000a50

08000a34 <_init>:
 8000a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a36:	bf00      	nop
 8000a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a3a:	bc08      	pop	{r3}
 8000a3c:	469e      	mov	lr, r3
 8000a3e:	4770      	bx	lr

08000a40 <_fini>:
 8000a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a42:	bf00      	nop
 8000a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a46:	bc08      	pop	{r3}
 8000a48:	469e      	mov	lr, r3
 8000a4a:	4770      	bx	lr
