
stm32_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e34  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f64  08000f64  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f64  08000f64  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000f64  08000f64  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f64  08000f64  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f64  08000f64  00010f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f68  08000f68  00010f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000018  08000f84  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08000f84  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005010  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c2e  00000000  00000000  00025051  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d84  00000000  00000000  00025c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000230  00000000  00000000  00026a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c8  00000000  00000000  00026c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000c34  00000000  00000000  00026e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002d0e  00000000  00000000  00027a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a000  00000000  00000000  0002a742  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00034742  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000700  00000000  00000000  000347c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000018 	.word	0x20000018
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f4c 	.word	0x08000f4c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000001c 	.word	0x2000001c
 800016c:	08000f4c 	.word	0x08000f4c

08000170 <EXTI0_IRQHandler>:
 * 			    ISR FUNCTRIONS						   *
 * 				                                       *
 *======================================================
 */
void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	// CLear by write 1 into pending register
	EXTI->EXTI_PR |= 1<<0 ;
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ_CALL
	Global_ptr_callBack[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3

}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000040 	.word	0x20000040

08000194 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	// CLear by write 1 into pending register
	EXTI->EXTI_PR |= 1<<1 ;
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ_CALL
	Global_ptr_callBack[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000040 	.word	0x20000040

080001b8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	// CLear by write 1 into pending register
	EXTI->EXTI_PR |= 1<<2 ;
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ_CALL
	Global_ptr_callBack[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000040 	.word	0x20000040

080001dc <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	// CLear by write 1 into pending register
	EXTI->EXTI_PR |= 1<<3 ;
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ_CALL
	Global_ptr_callBack[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000040 	.word	0x20000040

08000200 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	// CLear by write 1 into pending register
	EXTI->EXTI_PR |= 1<<4 ;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ_CALL
	Global_ptr_callBack[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000040 	.word	0x20000040

08000224 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if(EXTI->EXTI_PR & 1<<5){EXTI->EXTI_PR |= 1<<5 ; Global_ptr_callBack[5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<6){EXTI->EXTI_PR |= 1<<6 ; Global_ptr_callBack[6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<7){EXTI->EXTI_PR |= 1<<7 ; Global_ptr_callBack[7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<8){EXTI->EXTI_PR |= 1<<8 ; Global_ptr_callBack[8]();}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<9){EXTI->EXTI_PR |= 1<<9 ; Global_ptr_callBack[9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000040 	.word	0x20000040

080002cc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if(EXTI->EXTI_PR & 1<<10){EXTI->EXTI_PR |= 1<<10 ; Global_ptr_callBack[10]();}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<11){EXTI->EXTI_PR |= 1<<11 ; Global_ptr_callBack[11]();}
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<12){EXTI->EXTI_PR |= 1<<12 ; Global_ptr_callBack[12]();}
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<13){EXTI->EXTI_PR |= 1<<13 ; Global_ptr_callBack[13]();}
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<14){EXTI->EXTI_PR |= 1<<14 ; Global_ptr_callBack[14]();}
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<15){EXTI->EXTI_PR |= 1<<15 ; Global_ptr_callBack[15]();}
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000040 	.word	0x20000040

08000390 <Private_Get_CRLH_Position>:
 * 			Private Functions 					       *
 * 				                                       *
 *======================================================
 */
uint8_t Private_Get_CRLH_Position(uint16_t pinNumber)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b0f      	cmp	r3, #15
 800039e:	d843      	bhi.n	8000428 <Private_Get_CRLH_Position+0x98>
 80003a0:	a201      	add	r2, pc, #4	; (adr r2, 80003a8 <Private_Get_CRLH_Position+0x18>)
 80003a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a6:	bf00      	nop
 80003a8:	080003e9 	.word	0x080003e9
 80003ac:	080003ed 	.word	0x080003ed
 80003b0:	080003f1 	.word	0x080003f1
 80003b4:	080003f5 	.word	0x080003f5
 80003b8:	080003f9 	.word	0x080003f9
 80003bc:	080003fd 	.word	0x080003fd
 80003c0:	08000401 	.word	0x08000401
 80003c4:	08000405 	.word	0x08000405
 80003c8:	08000409 	.word	0x08000409
 80003cc:	0800040d 	.word	0x0800040d
 80003d0:	08000411 	.word	0x08000411
 80003d4:	08000415 	.word	0x08000415
 80003d8:	08000419 	.word	0x08000419
 80003dc:	0800041d 	.word	0x0800041d
 80003e0:	08000421 	.word	0x08000421
 80003e4:	08000425 	.word	0x08000425
	{
	case GPIO_PIN0 :
		return 0	;
 80003e8:	2300      	movs	r3, #0
 80003ea:	e01e      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN1  :
		return 4	;
 80003ec:	2304      	movs	r3, #4
 80003ee:	e01c      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN2 :
		return 8	;
 80003f0:	2308      	movs	r3, #8
 80003f2:	e01a      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN3 :
		return 12	;
 80003f4:	230c      	movs	r3, #12
 80003f6:	e018      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN4 :
		return 16	;
 80003f8:	2310      	movs	r3, #16
 80003fa:	e016      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;

	case GPIO_PIN5 :
		return 20	;
 80003fc:	2314      	movs	r3, #20
 80003fe:	e014      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN6 :
		return 24	;
 8000400:	2318      	movs	r3, #24
 8000402:	e012      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN7 :
		return 28	;
 8000404:	231c      	movs	r3, #28
 8000406:	e010      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN8 :
		return 0	;
 8000408:	2300      	movs	r3, #0
 800040a:	e00e      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN9  :
		return 4	;
 800040c:	2304      	movs	r3, #4
 800040e:	e00c      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN10 :
		return 8	;
 8000410:	2308      	movs	r3, #8
 8000412:	e00a      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN11 :
		return 12	;
 8000414:	230c      	movs	r3, #12
 8000416:	e008      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN12 :
		return 16	;
 8000418:	2310      	movs	r3, #16
 800041a:	e006      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;

	case GPIO_PIN13 :
		return 20	;
 800041c:	2314      	movs	r3, #20
 800041e:	e004      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN14 :
		return 24	;
 8000420:	2318      	movs	r3, #24
 8000422:	e002      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN15 :
		return 28	;
 8000424:	231c      	movs	r3, #28
 8000426:	e000      	b.n	800042a <Private_Get_CRLH_Position+0x9a>
		break		;
	default 		:
		return -1	;
 8000428:	23ff      	movs	r3, #255	; 0xff
		break		;


	}
}
 800042a:	4618      	mov	r0, r3
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr

08000434 <MCAL_GPIO_Init>:
* @retval 		: none
* Note			: remember that according to our LQFP48 package we only have ports : A-B-C-D
*===================================================================*/

void MCAL_GPIO_Init(GPIOx_Registers_t *GPIOx ,GPIO_Pin_Config_t *Pin_Config )
{
 8000434:	b590      	push	{r4, r7, lr}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	6039      	str	r1, [r7, #0]
	volatile uint32_t *configReg = NULL ;
 800043e:	2300      	movs	r3, #0
 8000440:	60bb      	str	r3, [r7, #8]
	uint8_t pinMode = 0 ;
 8000442:	2300      	movs	r3, #0
 8000444:	73fb      	strb	r3, [r7, #15]
	configReg = (Pin_Config->GPIO_PIN_NUMBER >GPIO_PIN7)? &GPIOx->GPIOx_CRH:&GPIOx->GPIOx_CRL;
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	881b      	ldrh	r3, [r3, #0]
 800044a:	2b07      	cmp	r3, #7
 800044c:	d902      	bls.n	8000454 <MCAL_GPIO_Init+0x20>
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	3304      	adds	r3, #4
 8000452:	e000      	b.n	8000456 <MCAL_GPIO_Init+0x22>
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	60bb      	str	r3, [r7, #8]
	// clear MODEx and CNFx
	*configReg &= ~(0xF<<Private_Get_CRLH_Position(Pin_Config->GPIO_PIN_NUMBER));
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	881b      	ldrh	r3, [r3, #0]
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ff97 	bl	8000390 <Private_Get_CRLH_Position>
 8000462:	4603      	mov	r3, r0
 8000464:	461a      	mov	r2, r3
 8000466:	230f      	movs	r3, #15
 8000468:	4093      	lsls	r3, r2
 800046a:	43da      	mvns	r2, r3
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	401a      	ands	r2, r3
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	601a      	str	r2, [r3, #0]
	//check if any output mode selected
	if(Pin_Config->GPIO_PIN_MODE == GPIO_OUTPUT_OD ||Pin_Config->GPIO_PIN_MODE == GPIO_OUTPUT_PP || Pin_Config->GPIO_PIN_MODE == AFIO_OUTPUT_OD || Pin_Config->GPIO_PIN_MODE == AFIO_OUTPUT_PP )
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	789b      	ldrb	r3, [r3, #2]
 800047a:	2b05      	cmp	r3, #5
 800047c:	d00b      	beq.n	8000496 <MCAL_GPIO_Init+0x62>
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	789b      	ldrb	r3, [r3, #2]
 8000482:	2b04      	cmp	r3, #4
 8000484:	d007      	beq.n	8000496 <MCAL_GPIO_Init+0x62>
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	789b      	ldrb	r3, [r3, #2]
 800048a:	2b07      	cmp	r3, #7
 800048c:	d003      	beq.n	8000496 <MCAL_GPIO_Init+0x62>
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	789b      	ldrb	r3, [r3, #2]
 8000492:	2b06      	cmp	r3, #6
 8000494:	d10e      	bne.n	80004b4 <MCAL_GPIO_Init+0x80>
	{
		//define MODEx and CNFx
		pinMode = ((((Pin_Config->GPIO_PIN_MODE - 4)<<2) | (Pin_Config->GPIO_OUT_SPEED)) & 0x0F);
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	789b      	ldrb	r3, [r3, #2]
 800049a:	3b04      	subs	r3, #4
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	b25a      	sxtb	r2, r3
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	78db      	ldrb	r3, [r3, #3]
 80004a4:	b25b      	sxtb	r3, r3
 80004a6:	4313      	orrs	r3, r2
 80004a8:	b25b      	sxtb	r3, r3
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	f003 030f 	and.w	r3, r3, #15
 80004b0:	73fb      	strb	r3, [r7, #15]
 80004b2:	e032      	b.n	800051a <MCAL_GPIO_Init+0xe6>

	}
	//check if any input mode selected
	else
	{
		if(Pin_Config->GPIO_PIN_MODE == GPIO_INPUT_PUP || Pin_Config->GPIO_PIN_MODE == GPIO_INPUT_PDWN)
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	789b      	ldrb	r3, [r3, #2]
 80004b8:	2b02      	cmp	r3, #2
 80004ba:	d003      	beq.n	80004c4 <MCAL_GPIO_Init+0x90>
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	789b      	ldrb	r3, [r3, #2]
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d11c      	bne.n	80004fe <MCAL_GPIO_Init+0xca>
		{
			pinMode =((GPIO_INPUT_PUP<<2)|0x0)&0x0F ;
 80004c4:	2308      	movs	r3, #8
 80004c6:	73fb      	strb	r3, [r7, #15]
			if(Pin_Config->GPIO_PIN_MODE == GPIO_INPUT_PUP)
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	789b      	ldrb	r3, [r3, #2]
 80004cc:	2b02      	cmp	r3, #2
 80004ce:	d10a      	bne.n	80004e6 <MCAL_GPIO_Init+0xb2>
				(GPIOx->GPIOx_ODR) |= (1<<Pin_Config->GPIO_PIN_NUMBER);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	683a      	ldr	r2, [r7, #0]
 80004d6:	8812      	ldrh	r2, [r2, #0]
 80004d8:	4611      	mov	r1, r2
 80004da:	2201      	movs	r2, #1
 80004dc:	408a      	lsls	r2, r1
 80004de:	431a      	orrs	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	60da      	str	r2, [r3, #12]
			if(Pin_Config->GPIO_PIN_MODE == GPIO_INPUT_PUP)
 80004e4:	e019      	b.n	800051a <MCAL_GPIO_Init+0xe6>
			else
				(GPIOx->GPIOx_ODR) &= ~(1<<Pin_Config->GPIO_PIN_NUMBER);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	68db      	ldr	r3, [r3, #12]
 80004ea:	683a      	ldr	r2, [r7, #0]
 80004ec:	8812      	ldrh	r2, [r2, #0]
 80004ee:	4611      	mov	r1, r2
 80004f0:	2201      	movs	r2, #1
 80004f2:	408a      	lsls	r2, r1
 80004f4:	43d2      	mvns	r2, r2
 80004f6:	401a      	ands	r2, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	60da      	str	r2, [r3, #12]
			if(Pin_Config->GPIO_PIN_MODE == GPIO_INPUT_PUP)
 80004fc:	e00d      	b.n	800051a <MCAL_GPIO_Init+0xe6>
		}
		else if(Pin_Config->GPIO_PIN_MODE == AFIO_INPUT)
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	789b      	ldrb	r3, [r3, #2]
 8000502:	2b08      	cmp	r3, #8
 8000504:	d102      	bne.n	800050c <MCAL_GPIO_Init+0xd8>
		{
			pinMode =((GPIO_INPUT_FLOAT<<2)|0x0)&0x0F ;
 8000506:	2304      	movs	r3, #4
 8000508:	73fb      	strb	r3, [r7, #15]
 800050a:	e006      	b.n	800051a <MCAL_GPIO_Init+0xe6>
		}
		else
		{
			pinMode =(((Pin_Config->GPIO_PIN_MODE)<<2)  | 0x0)&0x0F ;
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	789b      	ldrb	r3, [r3, #2]
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	b2db      	uxtb	r3, r3
 8000514:	f003 030f 	and.w	r3, r3, #15
 8000518:	73fb      	strb	r3, [r7, #15]

		}
	}
	(*configReg) |= (pinMode<<Private_Get_CRLH_Position(Pin_Config->GPIO_PIN_NUMBER));
 800051a:	7bfc      	ldrb	r4, [r7, #15]
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff ff35 	bl	8000390 <Private_Get_CRLH_Position>
 8000526:	4603      	mov	r3, r0
 8000528:	fa04 f203 	lsl.w	r2, r4, r3
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	431a      	orrs	r2, r3
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	601a      	str	r2, [r3, #0]
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	bd90      	pop	{r4, r7, pc}

0800053e <MCAL_GPIO_Pin_Write>:
* @param [out] 	: none
* @retval 		: none
* Note			: remember that according to our LQFP48 package we only have ports : A-B-C-D
*===================================================================*/
void MCAL_GPIO_Pin_Write(GPIOx_Registers_t *GPIOx , uint16_t Pin_number , uint8_t value)
{
 800053e:	b480      	push	{r7}
 8000540:	b083      	sub	sp, #12
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
 8000546:	460b      	mov	r3, r1
 8000548:	807b      	strh	r3, [r7, #2]
 800054a:	4613      	mov	r3, r2
 800054c:	707b      	strb	r3, [r7, #1]
	if(value == GPIO_PIN_HIGH)
 800054e:	787b      	ldrb	r3, [r7, #1]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d109      	bne.n	8000568 <MCAL_GPIO_Pin_Write+0x2a>
	{
		GPIOx->GPIOx_ODR |= (1<<Pin_number);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	887a      	ldrh	r2, [r7, #2]
 800055a:	2101      	movs	r1, #1
 800055c:	fa01 f202 	lsl.w	r2, r1, r2
 8000560:	431a      	orrs	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	60da      	str	r2, [r3, #12]
	}
	else
	{
		GPIOx->GPIOx_ODR &= ~(1<<Pin_number);
	}
}
 8000566:	e009      	b.n	800057c <MCAL_GPIO_Pin_Write+0x3e>
		GPIOx->GPIOx_ODR &= ~(1<<Pin_number);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	887a      	ldrh	r2, [r7, #2]
 800056e:	2101      	movs	r1, #1
 8000570:	fa01 f202 	lsl.w	r2, r1, r2
 8000574:	43d2      	mvns	r2, r2
 8000576:	401a      	ands	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	60da      	str	r2, [r3, #12]
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
	...

08000588 <MCAL_RCC_Get_PCLK1_Freq>:
#include"RCC.h"
uint8_t Priv_APBprescaler[8] =  {0,0,0,0,1,2,3,4};
uint8_t Priv_AHBprescaler[16] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};

uint32_t MCAL_RCC_Get_PCLK1_Freq()
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	return (MCAL_RCC_Get_HCLK_Freq()>>Priv_APBprescaler[(RCC->RCC_CFGR>>8)&0b111]);
 800058c:	f000 f824 	bl	80005d8 <MCAL_RCC_Get_HCLK_Freq>
 8000590:	4601      	mov	r1, r0
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <MCAL_RCC_Get_PCLK1_Freq+0x20>)
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	0a1b      	lsrs	r3, r3, #8
 8000598:	f003 0307 	and.w	r3, r3, #7
 800059c:	4a03      	ldr	r2, [pc, #12]	; (80005ac <MCAL_RCC_Get_PCLK1_Freq+0x24>)
 800059e:	5cd3      	ldrb	r3, [r2, r3]
 80005a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40021000 	.word	0x40021000
 80005ac:	20000000 	.word	0x20000000

080005b0 <MCAL_RCC_Get_PCLK2_Freq>:
uint32_t MCAL_RCC_Get_PCLK2_Freq()
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	return (MCAL_RCC_Get_HCLK_Freq()>>Priv_APBprescaler[(RCC->RCC_CFGR>>11)&0b111]);
 80005b4:	f000 f810 	bl	80005d8 <MCAL_RCC_Get_HCLK_Freq>
 80005b8:	4601      	mov	r1, r0
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <MCAL_RCC_Get_PCLK2_Freq+0x20>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	0adb      	lsrs	r3, r3, #11
 80005c0:	f003 0307 	and.w	r3, r3, #7
 80005c4:	4a03      	ldr	r2, [pc, #12]	; (80005d4 <MCAL_RCC_Get_PCLK2_Freq+0x24>)
 80005c6:	5cd3      	ldrb	r3, [r2, r3]
 80005c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40021000 	.word	0x40021000
 80005d4:	20000000 	.word	0x20000000

080005d8 <MCAL_RCC_Get_HCLK_Freq>:
uint32_t MCAL_RCC_Get_HCLK_Freq()
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	return (MCAL_RCC_Get_SYSCLK_Freq()>>Priv_AHBprescaler[(RCC->RCC_CFGR>>4)&0xF]);
 80005dc:	f000 f810 	bl	8000600 <MCAL_RCC_Get_SYSCLK_Freq>
 80005e0:	4601      	mov	r1, r0
 80005e2:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <MCAL_RCC_Get_HCLK_Freq+0x20>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	091b      	lsrs	r3, r3, #4
 80005e8:	f003 030f 	and.w	r3, r3, #15
 80005ec:	4a03      	ldr	r2, [pc, #12]	; (80005fc <MCAL_RCC_Get_HCLK_Freq+0x24>)
 80005ee:	5cd3      	ldrb	r3, [r2, r3]
 80005f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40021000 	.word	0x40021000
 80005fc:	20000008 	.word	0x20000008

08000600 <MCAL_RCC_Get_SYSCLK_Freq>:
uint32_t MCAL_RCC_Get_SYSCLK_Freq()
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
	switch((RCC->RCC_CFGR>>2)&0b11)
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <MCAL_RCC_Get_SYSCLK_Freq+0x30>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	089b      	lsrs	r3, r3, #2
 800060a:	f003 0303 	and.w	r3, r3, #3
 800060e:	2b01      	cmp	r3, #1
 8000610:	d006      	beq.n	8000620 <MCAL_RCC_Get_SYSCLK_Freq+0x20>
 8000612:	2b01      	cmp	r3, #1
 8000614:	d302      	bcc.n	800061c <MCAL_RCC_Get_SYSCLK_Freq+0x1c>
 8000616:	2b02      	cmp	r3, #2
 8000618:	d004      	beq.n	8000624 <MCAL_RCC_Get_SYSCLK_Freq+0x24>
 800061a:	e005      	b.n	8000628 <MCAL_RCC_Get_SYSCLK_Freq+0x28>
		{
		case 0 :
			return HSI_CLK ;
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <MCAL_RCC_Get_SYSCLK_Freq+0x34>)
 800061e:	e003      	b.n	8000628 <MCAL_RCC_Get_SYSCLK_Freq+0x28>
			break ;
		case 1 :
			return HSI_CLK ;
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <MCAL_RCC_Get_SYSCLK_Freq+0x34>)
 8000622:	e001      	b.n	8000628 <MCAL_RCC_Get_SYSCLK_Freq+0x28>
			break ;
		case 2 :
			return 16000000 ;
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <MCAL_RCC_Get_SYSCLK_Freq+0x38>)
 8000626:	e7ff      	b.n	8000628 <MCAL_RCC_Get_SYSCLK_Freq+0x28>
			break ;

		}
}
 8000628:	4618      	mov	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	40021000 	.word	0x40021000
 8000634:	007a1200 	.word	0x007a1200
 8000638:	00f42400 	.word	0x00f42400

0800063c <SPI1_IRQHandler>:
//================================================

//===============================================
//=================ISRQ Handler===================
void SPI1_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
	struct SPI_IRQ_SRC IRQSrc ;
	IRQSrc.TXE = ((SPI1->SPI_SR & 1<<1)>>1);
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <SPI1_IRQHandler+0x54>)
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	085b      	lsrs	r3, r3, #1
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	b2da      	uxtb	r2, r3
 800064e:	793b      	ldrb	r3, [r7, #4]
 8000650:	f362 0300 	bfi	r3, r2, #0, #1
 8000654:	713b      	strb	r3, [r7, #4]
	IRQSrc.RXNE = ((SPI1->SPI_SR) & 1<<0);
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <SPI1_IRQHandler+0x54>)
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	b2da      	uxtb	r2, r3
 8000660:	793b      	ldrb	r3, [r7, #4]
 8000662:	f362 0341 	bfi	r3, r2, #1, #1
 8000666:	713b      	strb	r3, [r7, #4]
	IRQSrc.ERR = ((SPI1->SPI_SR & 1<<4)>>4);
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <SPI1_IRQHandler+0x54>)
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	091b      	lsrs	r3, r3, #4
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	b2da      	uxtb	r2, r3
 8000674:	793b      	ldrb	r3, [r7, #4]
 8000676:	f362 0382 	bfi	r3, r2, #2, #1
 800067a:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI1_INDEX]->Call_Back_Ptr(IRQSrc);
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <SPI1_IRQHandler+0x58>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	7938      	ldrb	r0, [r7, #4]
 8000684:	4798      	blx	r3

}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40013000 	.word	0x40013000
 8000694:	20000034 	.word	0x20000034

08000698 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	struct SPI_IRQ_SRC IRQSrc ;
	IRQSrc.TXE = ((SPI2->SPI_SR & 1<<1)>>1);
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SPI2_IRQHandler+0x54>)
 80006a0:	689b      	ldr	r3, [r3, #8]
 80006a2:	085b      	lsrs	r3, r3, #1
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	793b      	ldrb	r3, [r7, #4]
 80006ac:	f362 0300 	bfi	r3, r2, #0, #1
 80006b0:	713b      	strb	r3, [r7, #4]
	IRQSrc.RXNE = ((SPI2->SPI_SR) & 1<<0);
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <SPI2_IRQHandler+0x54>)
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	793b      	ldrb	r3, [r7, #4]
 80006be:	f362 0341 	bfi	r3, r2, #1, #1
 80006c2:	713b      	strb	r3, [r7, #4]
	IRQSrc.ERR = ((SPI2->SPI_SR & 1<<4)>>4);
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <SPI2_IRQHandler+0x54>)
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	091b      	lsrs	r3, r3, #4
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	793b      	ldrb	r3, [r7, #4]
 80006d2:	f362 0382 	bfi	r3, r2, #2, #1
 80006d6:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_INDEX]->Call_Back_Ptr(IRQSrc);
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <SPI2_IRQHandler+0x58>)
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	7938      	ldrb	r0, [r7, #4]
 80006e0:	4798      	blx	r3

}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40003800 	.word	0x40003800
 80006f0:	20000034 	.word	0x20000034

080006f4 <MCAL_SPI_Init>:
* @param [out] 	: void
* @retval 		: none
* Note			: this function has no prerequisites used to initialize the SPI peripheral
*===================================================================*/
void MCAL_SPI_Init(SPI_Registers_t *SPIx , SPI_Config_t *SPIconfig)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
	uint16_t tempReg_CR1 = 0x0 ;
 80006fe:	2300      	movs	r3, #0
 8000700:	81fb      	strh	r3, [r7, #14]
	uint16_t tempReg_CR2 = 0x0 ;
 8000702:	2300      	movs	r3, #0
 8000704:	81bb      	strh	r3, [r7, #12]
	if(SPIx == SPI1)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a3c      	ldr	r2, [pc, #240]	; (80007fc <MCAL_SPI_Init+0x108>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d109      	bne.n	8000722 <MCAL_SPI_Init+0x2e>
	{
		Global_SPI_Config[SPI1_INDEX] = SPIconfig ;
 800070e:	4a3c      	ldr	r2, [pc, #240]	; (8000800 <MCAL_SPI_Init+0x10c>)
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	6013      	str	r3, [r2, #0]
		RCC_SPI1_CLK_EN();
 8000714:	4b3b      	ldr	r3, [pc, #236]	; (8000804 <MCAL_SPI_Init+0x110>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a3a      	ldr	r2, [pc, #232]	; (8000804 <MCAL_SPI_Init+0x110>)
 800071a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	e00c      	b.n	800073c <MCAL_SPI_Init+0x48>
	}
	else if(SPIx == SPI2)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a38      	ldr	r2, [pc, #224]	; (8000808 <MCAL_SPI_Init+0x114>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d108      	bne.n	800073c <MCAL_SPI_Init+0x48>
	{
		Global_SPI_Config[SPI2_INDEX] = SPIconfig ;
 800072a:	4a35      	ldr	r2, [pc, #212]	; (8000800 <MCAL_SPI_Init+0x10c>)
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	6053      	str	r3, [r2, #4]
		RCC_SPI2_CLK_EN();
 8000730:	4b34      	ldr	r3, [pc, #208]	; (8000804 <MCAL_SPI_Init+0x110>)
 8000732:	69db      	ldr	r3, [r3, #28]
 8000734:	4a33      	ldr	r2, [pc, #204]	; (8000804 <MCAL_SPI_Init+0x110>)
 8000736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073a:	61d3      	str	r3, [r2, #28]
	}

	//1-Enable SPI CR1[SPE:6]
	tempReg_CR1 |= 1<<6 ;
 800073c:	89fb      	ldrh	r3, [r7, #14]
 800073e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000742:	81fb      	strh	r3, [r7, #14]
	//2-Initialize the SPI MODE : Slave / Master
	tempReg_CR1 |=SPIconfig->Device_Mode ;
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	881a      	ldrh	r2, [r3, #0]
 8000748:	89fb      	ldrh	r3, [r7, #14]
 800074a:	4313      	orrs	r3, r2
 800074c:	81fb      	strh	r3, [r7, #14]
	//3-Communication Mode
	tempReg_CR1 |= SPIconfig->Comm_Mode ;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	885a      	ldrh	r2, [r3, #2]
 8000752:	89fb      	ldrh	r3, [r7, #14]
 8000754:	4313      	orrs	r3, r2
 8000756:	81fb      	strh	r3, [r7, #14]
	//4-Frame Format
	tempReg_CR1 |= SPIconfig->Frame_Format ;
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	889a      	ldrh	r2, [r3, #4]
 800075c:	89fb      	ldrh	r3, [r7, #14]
 800075e:	4313      	orrs	r3, r2
 8000760:	81fb      	strh	r3, [r7, #14]
	//5-Data Size
	tempReg_CR1 |= SPIconfig->Data_Size ;
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	88da      	ldrh	r2, [r3, #6]
 8000766:	89fb      	ldrh	r3, [r7, #14]
 8000768:	4313      	orrs	r3, r2
 800076a:	81fb      	strh	r3, [r7, #14]
	//6-CLK Phase
	tempReg_CR1 |= SPIconfig->Clk_Phase ;
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	895a      	ldrh	r2, [r3, #10]
 8000770:	89fb      	ldrh	r3, [r7, #14]
 8000772:	4313      	orrs	r3, r2
 8000774:	81fb      	strh	r3, [r7, #14]
	//7-CLK Polarity
	tempReg_CR1 |= SPIconfig->Clk_Polarity ;
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	891a      	ldrh	r2, [r3, #8]
 800077a:	89fb      	ldrh	r3, [r7, #14]
 800077c:	4313      	orrs	r3, r2
 800077e:	81fb      	strh	r3, [r7, #14]
	//8-NSS
	if(SPIconfig->NSS == SPI_NSS_HW_SSO_EN)
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	899b      	ldrh	r3, [r3, #12]
 8000784:	2b04      	cmp	r3, #4
 8000786:	d105      	bne.n	8000794 <MCAL_SPI_Init+0xa0>
		tempReg_CR2 |= SPIconfig->NSS ;
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	899a      	ldrh	r2, [r3, #12]
 800078c:	89bb      	ldrh	r3, [r7, #12]
 800078e:	4313      	orrs	r3, r2
 8000790:	81bb      	strh	r3, [r7, #12]
 8000792:	e004      	b.n	800079e <MCAL_SPI_Init+0xaa>
	else if(SPIconfig->NSS == SPI_NSS_HW_SSO_DIS)
		tempReg_CR2 &= SPIconfig->NSS ;
	else
		tempReg_CR1 |= SPIconfig->NSS ;
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	899a      	ldrh	r2, [r3, #12]
 8000798:	89fb      	ldrh	r3, [r7, #14]
 800079a:	4313      	orrs	r3, r2
 800079c:	81fb      	strh	r3, [r7, #14]
	//9-PreScaller
	tempReg_CR1 |= SPIconfig->Prescaller ;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	89da      	ldrh	r2, [r3, #14]
 80007a2:	89fb      	ldrh	r3, [r7, #14]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	81fb      	strh	r3, [r7, #14]
	//10-Interrupt Enable/Disable
	if(SPIconfig->IRQEn != SPI_IRQ_DIS)
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	8a1b      	ldrh	r3, [r3, #16]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d019      	beq.n	80007e4 <MCAL_SPI_Init+0xf0>
	{
		tempReg_CR2 |= SPIconfig->IRQEn ;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	8a1a      	ldrh	r2, [r3, #16]
 80007b4:	89bb      	ldrh	r3, [r7, #12]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	81bb      	strh	r3, [r7, #12]
		if(SPIx==SPI1)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <MCAL_SPI_Init+0x108>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d106      	bne.n	80007d0 <MCAL_SPI_Init+0xdc>
			NVIC_IRQ35_SPI1_EN();
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <MCAL_SPI_Init+0x118>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a11      	ldr	r2, [pc, #68]	; (800080c <MCAL_SPI_Init+0x118>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	6013      	str	r3, [r2, #0]
 80007ce:	e009      	b.n	80007e4 <MCAL_SPI_Init+0xf0>
		else if(SPIx==SPI2)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a0d      	ldr	r2, [pc, #52]	; (8000808 <MCAL_SPI_Init+0x114>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d105      	bne.n	80007e4 <MCAL_SPI_Init+0xf0>
			NVIC_IRQ36_SPI2_EN();
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MCAL_SPI_Init+0x118>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0b      	ldr	r2, [pc, #44]	; (800080c <MCAL_SPI_Init+0x118>)
 80007de:	f043 0310 	orr.w	r3, r3, #16
 80007e2:	6013      	str	r3, [r2, #0]

	}
		//Initialize the registers
		SPIx->SPI_CR1 = tempReg_CR1 ;
 80007e4:	89fa      	ldrh	r2, [r7, #14]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	601a      	str	r2, [r3, #0]
		SPIx->SPI_CR2 = tempReg_CR2 ;
 80007ea:	89ba      	ldrh	r2, [r7, #12]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	605a      	str	r2, [r3, #4]

}
 80007f0:	bf00      	nop
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40013000 	.word	0x40013000
 8000800:	20000034 	.word	0x20000034
 8000804:	40021000 	.word	0x40021000
 8000808:	40003800 	.word	0x40003800
 800080c:	e000e104 	.word	0xe000e104

08000810 <MCAL_SPI_Tx_Rx_Data>:
* @param [out] 	: void
* @reutval 		: none
* Note			: this function request that the SPI peripheral is already initialized
*===================================================================*/
void MCAL_SPI_Tx_Rx_Data(SPI_Registers_t *SPIx , uint16_t *ptrDataBuffer , enum SPI_PollingMechanism PollState)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	4613      	mov	r3, r2
 800081c:	71fb      	strb	r3, [r7, #7]
	if(PollState == SPI_Polling_Enable)
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d106      	bne.n	8000832 <MCAL_SPI_Tx_Rx_Data+0x22>
		while(!((SPIx->SPI_SR)&SPI_SR_TXE));
 8000824:	bf00      	nop
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	2b00      	cmp	r3, #0
 8000830:	d0f9      	beq.n	8000826 <MCAL_SPI_Tx_Rx_Data+0x16>
    SPIx->SPI_DR = *ptrDataBuffer  ;
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	461a      	mov	r2, r3
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	60da      	str	r2, [r3, #12]
	if(PollState == SPI_Polling_Enable)
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d106      	bne.n	8000850 <MCAL_SPI_Tx_Rx_Data+0x40>
		while(!((SPIx->SPI_SR)&SPI_SR_RXNE));
 8000842:	bf00      	nop
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	2b00      	cmp	r3, #0
 800084e:	d0f9      	beq.n	8000844 <MCAL_SPI_Tx_Rx_Data+0x34>
	*ptrDataBuffer = SPIx->SPI_DR ;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	b29a      	uxth	r2, r3
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	801a      	strh	r2, [r3, #0]
}
 800085a:	bf00      	nop
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <MCAL_SPI_Set_GPIO>:
* @param [out] 	: void
* @reutval 		: none
* Note			: this function request that the SPI peripheral is already initialized
*===================================================================*/
void MCAL_SPI_Set_GPIO(SPI_Registers_t *SPIx)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Config_t GPIO_Config ;
	if(SPIx == SPI1)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a77      	ldr	r2, [pc, #476]	; (8000a4c <MCAL_SPI_Set_GPIO+0x1e8>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d171      	bne.n	8000958 <MCAL_SPI_Set_GPIO+0xf4>
	{
		//PA4 : NSS
		//PA5 : SCLK
		//PA6 : MISO
		//PA7 : MOSI
		if(Global_SPI_Config[SPI1_INDEX]->Device_Mode == SPI_MASTER)
 8000874:	4b76      	ldr	r3, [pc, #472]	; (8000a50 <MCAL_SPI_Set_GPIO+0x1ec>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	2b04      	cmp	r3, #4
 800087c:	d136      	bne.n	80008ec <MCAL_SPI_Set_GPIO+0x88>
		{
			//1-Initialize NSS Pin
			switch(Global_SPI_Config[SPI1_INDEX]->NSS)
 800087e:	4b74      	ldr	r3, [pc, #464]	; (8000a50 <MCAL_SPI_Set_GPIO+0x1ec>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	899b      	ldrh	r3, [r3, #12]
 8000884:	2b04      	cmp	r3, #4
 8000886:	d10c      	bne.n	80008a2 <MCAL_SPI_Set_GPIO+0x3e>
				GPIO_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
				GPIO_Config.GPIO_PIN_MODE = GPIO_INPUT_FLOAT ;
				MCAL_GPIO_Init(GPIOA, &GPIO_Config);
				break;
			case SPI_NSS_HW_SSO_EN :
				GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN4 ;
 8000888:	2304      	movs	r3, #4
 800088a:	81bb      	strh	r3, [r7, #12]
				GPIO_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 800088c:	2301      	movs	r3, #1
 800088e:	73fb      	strb	r3, [r7, #15]
				GPIO_Config.GPIO_PIN_MODE = AFIO_OUTPUT_PP ;
 8000890:	2306      	movs	r3, #6
 8000892:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &GPIO_Config);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4619      	mov	r1, r3
 800089a:	486e      	ldr	r0, [pc, #440]	; (8000a54 <MCAL_SPI_Set_GPIO+0x1f0>)
 800089c:	f7ff fdca 	bl	8000434 <MCAL_GPIO_Init>
				break;
 80008a0:	bf00      	nop

			}
			//2-Initialize SCLK Pin
			GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN5 ;
 80008a2:	2305      	movs	r3, #5
 80008a4:	81bb      	strh	r3, [r7, #12]
			GPIO_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 80008a6:	2301      	movs	r3, #1
 80008a8:	73fb      	strb	r3, [r7, #15]
			GPIO_Config.GPIO_PIN_MODE = AFIO_OUTPUT_PP ;
 80008aa:	2306      	movs	r3, #6
 80008ac:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &GPIO_Config);
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	4619      	mov	r1, r3
 80008b4:	4867      	ldr	r0, [pc, #412]	; (8000a54 <MCAL_SPI_Set_GPIO+0x1f0>)
 80008b6:	f7ff fdbd 	bl	8000434 <MCAL_GPIO_Init>

			//3-Initialize  MISO Pin
			GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN6 ;
 80008ba:	2306      	movs	r3, #6
 80008bc:	81bb      	strh	r3, [r7, #12]
			GPIO_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 80008be:	2301      	movs	r3, #1
 80008c0:	73fb      	strb	r3, [r7, #15]
			GPIO_Config.GPIO_PIN_MODE = GPIO_INPUT_FLOAT ;
 80008c2:	2301      	movs	r3, #1
 80008c4:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &GPIO_Config);
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	4619      	mov	r1, r3
 80008cc:	4861      	ldr	r0, [pc, #388]	; (8000a54 <MCAL_SPI_Set_GPIO+0x1f0>)
 80008ce:	f7ff fdb1 	bl	8000434 <MCAL_GPIO_Init>

			//4-Initialize MOSI Pin
			GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN7 ;
 80008d2:	2307      	movs	r3, #7
 80008d4:	81bb      	strh	r3, [r7, #12]
			GPIO_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 80008d6:	2301      	movs	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]
			GPIO_Config.GPIO_PIN_MODE = AFIO_OUTPUT_PP ;
 80008da:	2306      	movs	r3, #6
 80008dc:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &GPIO_Config);
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	4619      	mov	r1, r3
 80008e4:	485b      	ldr	r0, [pc, #364]	; (8000a54 <MCAL_SPI_Set_GPIO+0x1f0>)
 80008e6:	f7ff fda5 	bl	8000434 <MCAL_GPIO_Init>
			GPIO_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
			GPIO_Config.GPIO_PIN_MODE = GPIO_INPUT_FLOAT ;
			MCAL_GPIO_Init(GPIOB, &GPIO_Config);
		}
	}
}
 80008ea:	e0aa      	b.n	8000a42 <MCAL_SPI_Set_GPIO+0x1de>
			if(Global_SPI_Config[SPI1_INDEX]->NSS == SPI_NSS_HW_SLAVE)
 80008ec:	4b58      	ldr	r3, [pc, #352]	; (8000a50 <MCAL_SPI_Set_GPIO+0x1ec>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	899b      	ldrh	r3, [r3, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d10b      	bne.n	800090e <MCAL_SPI_Set_GPIO+0xaa>
				GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN4 ;
 80008f6:	2304      	movs	r3, #4
 80008f8:	81bb      	strh	r3, [r7, #12]
				GPIO_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 80008fa:	2301      	movs	r3, #1
 80008fc:	73fb      	strb	r3, [r7, #15]
				GPIO_Config.GPIO_PIN_MODE = GPIO_INPUT_FLOAT ;
 80008fe:	2301      	movs	r3, #1
 8000900:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &GPIO_Config);
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	4619      	mov	r1, r3
 8000908:	4852      	ldr	r0, [pc, #328]	; (8000a54 <MCAL_SPI_Set_GPIO+0x1f0>)
 800090a:	f7ff fd93 	bl	8000434 <MCAL_GPIO_Init>
			GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN5 ;
 800090e:	2305      	movs	r3, #5
 8000910:	81bb      	strh	r3, [r7, #12]
			GPIO_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 8000912:	2301      	movs	r3, #1
 8000914:	73fb      	strb	r3, [r7, #15]
			GPIO_Config.GPIO_PIN_MODE = GPIO_INPUT_FLOAT ;
 8000916:	2301      	movs	r3, #1
 8000918:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &GPIO_Config);
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	4619      	mov	r1, r3
 8000920:	484c      	ldr	r0, [pc, #304]	; (8000a54 <MCAL_SPI_Set_GPIO+0x1f0>)
 8000922:	f7ff fd87 	bl	8000434 <MCAL_GPIO_Init>
			GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN6 ;
 8000926:	2306      	movs	r3, #6
 8000928:	81bb      	strh	r3, [r7, #12]
			GPIO_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 800092a:	2301      	movs	r3, #1
 800092c:	73fb      	strb	r3, [r7, #15]
			GPIO_Config.GPIO_PIN_MODE = AFIO_OUTPUT_PP ;
 800092e:	2306      	movs	r3, #6
 8000930:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &GPIO_Config);
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	4619      	mov	r1, r3
 8000938:	4846      	ldr	r0, [pc, #280]	; (8000a54 <MCAL_SPI_Set_GPIO+0x1f0>)
 800093a:	f7ff fd7b 	bl	8000434 <MCAL_GPIO_Init>
			GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN7 ;
 800093e:	2307      	movs	r3, #7
 8000940:	81bb      	strh	r3, [r7, #12]
			GPIO_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 8000942:	2301      	movs	r3, #1
 8000944:	73fb      	strb	r3, [r7, #15]
			GPIO_Config.GPIO_PIN_MODE = GPIO_INPUT_FLOAT ;
 8000946:	2301      	movs	r3, #1
 8000948:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &GPIO_Config);
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4619      	mov	r1, r3
 8000950:	4840      	ldr	r0, [pc, #256]	; (8000a54 <MCAL_SPI_Set_GPIO+0x1f0>)
 8000952:	f7ff fd6f 	bl	8000434 <MCAL_GPIO_Init>
}
 8000956:	e074      	b.n	8000a42 <MCAL_SPI_Set_GPIO+0x1de>
	else if(SPIx == SPI2)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a3f      	ldr	r2, [pc, #252]	; (8000a58 <MCAL_SPI_Set_GPIO+0x1f4>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d170      	bne.n	8000a42 <MCAL_SPI_Set_GPIO+0x1de>
		if(Global_SPI_Config[SPI2_INDEX]->Device_Mode == SPI_MASTER)
 8000960:	4b3b      	ldr	r3, [pc, #236]	; (8000a50 <MCAL_SPI_Set_GPIO+0x1ec>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	2b04      	cmp	r3, #4
 8000968:	d136      	bne.n	80009d8 <MCAL_SPI_Set_GPIO+0x174>
			switch(Global_SPI_Config[SPI2_INDEX]->NSS)
 800096a:	4b39      	ldr	r3, [pc, #228]	; (8000a50 <MCAL_SPI_Set_GPIO+0x1ec>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	899b      	ldrh	r3, [r3, #12]
 8000970:	2b04      	cmp	r3, #4
 8000972:	d10c      	bne.n	800098e <MCAL_SPI_Set_GPIO+0x12a>
				GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN12 ;
 8000974:	230c      	movs	r3, #12
 8000976:	81bb      	strh	r3, [r7, #12]
				GPIO_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 8000978:	2301      	movs	r3, #1
 800097a:	73fb      	strb	r3, [r7, #15]
				GPIO_Config.GPIO_PIN_MODE = AFIO_OUTPUT_PP ;
 800097c:	2306      	movs	r3, #6
 800097e:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &GPIO_Config);
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	4619      	mov	r1, r3
 8000986:	4835      	ldr	r0, [pc, #212]	; (8000a5c <MCAL_SPI_Set_GPIO+0x1f8>)
 8000988:	f7ff fd54 	bl	8000434 <MCAL_GPIO_Init>
				break;
 800098c:	bf00      	nop
			GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN13 ;
 800098e:	230d      	movs	r3, #13
 8000990:	81bb      	strh	r3, [r7, #12]
			GPIO_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 8000992:	2301      	movs	r3, #1
 8000994:	73fb      	strb	r3, [r7, #15]
			GPIO_Config.GPIO_PIN_MODE = AFIO_OUTPUT_PP ;
 8000996:	2306      	movs	r3, #6
 8000998:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &GPIO_Config);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4619      	mov	r1, r3
 80009a0:	482e      	ldr	r0, [pc, #184]	; (8000a5c <MCAL_SPI_Set_GPIO+0x1f8>)
 80009a2:	f7ff fd47 	bl	8000434 <MCAL_GPIO_Init>
			GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN14 ;
 80009a6:	230e      	movs	r3, #14
 80009a8:	81bb      	strh	r3, [r7, #12]
			GPIO_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 80009aa:	2301      	movs	r3, #1
 80009ac:	73fb      	strb	r3, [r7, #15]
			GPIO_Config.GPIO_PIN_MODE = GPIO_INPUT_FLOAT ;
 80009ae:	2301      	movs	r3, #1
 80009b0:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &GPIO_Config);
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	4619      	mov	r1, r3
 80009b8:	4828      	ldr	r0, [pc, #160]	; (8000a5c <MCAL_SPI_Set_GPIO+0x1f8>)
 80009ba:	f7ff fd3b 	bl	8000434 <MCAL_GPIO_Init>
			GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN15 ;
 80009be:	230f      	movs	r3, #15
 80009c0:	81bb      	strh	r3, [r7, #12]
			GPIO_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 80009c2:	2301      	movs	r3, #1
 80009c4:	73fb      	strb	r3, [r7, #15]
			GPIO_Config.GPIO_PIN_MODE = AFIO_OUTPUT_PP ;
 80009c6:	2306      	movs	r3, #6
 80009c8:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &GPIO_Config);
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	4619      	mov	r1, r3
 80009d0:	4822      	ldr	r0, [pc, #136]	; (8000a5c <MCAL_SPI_Set_GPIO+0x1f8>)
 80009d2:	f7ff fd2f 	bl	8000434 <MCAL_GPIO_Init>
}
 80009d6:	e034      	b.n	8000a42 <MCAL_SPI_Set_GPIO+0x1de>
			if(Global_SPI_Config[SPI2_INDEX]->NSS == SPI_NSS_HW_SLAVE)
 80009d8:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <MCAL_SPI_Set_GPIO+0x1ec>)
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	899b      	ldrh	r3, [r3, #12]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d10b      	bne.n	80009fa <MCAL_SPI_Set_GPIO+0x196>
				GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN12 ;
 80009e2:	230c      	movs	r3, #12
 80009e4:	81bb      	strh	r3, [r7, #12]
				GPIO_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 80009e6:	2301      	movs	r3, #1
 80009e8:	73fb      	strb	r3, [r7, #15]
				GPIO_Config.GPIO_PIN_MODE = GPIO_INPUT_FLOAT ;
 80009ea:	2301      	movs	r3, #1
 80009ec:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &GPIO_Config);
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	4619      	mov	r1, r3
 80009f4:	4819      	ldr	r0, [pc, #100]	; (8000a5c <MCAL_SPI_Set_GPIO+0x1f8>)
 80009f6:	f7ff fd1d 	bl	8000434 <MCAL_GPIO_Init>
			GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN13 ;
 80009fa:	230d      	movs	r3, #13
 80009fc:	81bb      	strh	r3, [r7, #12]
			GPIO_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 80009fe:	2301      	movs	r3, #1
 8000a00:	73fb      	strb	r3, [r7, #15]
			GPIO_Config.GPIO_PIN_MODE = GPIO_INPUT_FLOAT ;
 8000a02:	2301      	movs	r3, #1
 8000a04:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &GPIO_Config);
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4813      	ldr	r0, [pc, #76]	; (8000a5c <MCAL_SPI_Set_GPIO+0x1f8>)
 8000a0e:	f7ff fd11 	bl	8000434 <MCAL_GPIO_Init>
			GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN14 ;
 8000a12:	230e      	movs	r3, #14
 8000a14:	81bb      	strh	r3, [r7, #12]
			GPIO_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 8000a16:	2301      	movs	r3, #1
 8000a18:	73fb      	strb	r3, [r7, #15]
			GPIO_Config.GPIO_PIN_MODE = AFIO_OUTPUT_PP ;
 8000a1a:	2306      	movs	r3, #6
 8000a1c:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &GPIO_Config);
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4619      	mov	r1, r3
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <MCAL_SPI_Set_GPIO+0x1f8>)
 8000a26:	f7ff fd05 	bl	8000434 <MCAL_GPIO_Init>
			GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN15 ;
 8000a2a:	230f      	movs	r3, #15
 8000a2c:	81bb      	strh	r3, [r7, #12]
			GPIO_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	73fb      	strb	r3, [r7, #15]
			GPIO_Config.GPIO_PIN_MODE = GPIO_INPUT_FLOAT ;
 8000a32:	2301      	movs	r3, #1
 8000a34:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &GPIO_Config);
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4807      	ldr	r0, [pc, #28]	; (8000a5c <MCAL_SPI_Set_GPIO+0x1f8>)
 8000a3e:	f7ff fcf9 	bl	8000434 <MCAL_GPIO_Init>
}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40013000 	.word	0x40013000
 8000a50:	20000034 	.word	0x20000034
 8000a54:	40010800 	.word	0x40010800
 8000a58:	40003800 	.word	0x40003800
 8000a5c:	40010c00 	.word	0x40010c00

08000a60 <MCAL_USART_Init>:
// Note this driver Support only one UART at a time if you want to support all uarts u can create an array of configurations
USART_Config_t *Gl_Config = NULL ;

//*~*~*~**~*~*~**~*~*~**~*~*~*
void MCAL_USART_Init(USART_Registers_t *USARTx , USART_Config_t *config )
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
	Gl_Config = config ;
 8000a6a:	4a5b      	ldr	r2, [pc, #364]	; (8000bd8 <MCAL_USART_Init+0x178>)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	6013      	str	r3, [r2, #0]
//-------------------1-Enable clock for USART------------------------------------------
	if(USARTx == USART1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a5a      	ldr	r2, [pc, #360]	; (8000bdc <MCAL_USART_Init+0x17c>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d106      	bne.n	8000a86 <MCAL_USART_Init+0x26>
		RCC_USART1_CLK_EN();
 8000a78:	4b59      	ldr	r3, [pc, #356]	; (8000be0 <MCAL_USART_Init+0x180>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a58      	ldr	r2, [pc, #352]	; (8000be0 <MCAL_USART_Init+0x180>)
 8000a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	e014      	b.n	8000ab0 <MCAL_USART_Init+0x50>
	else if(USARTx == USART2)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a56      	ldr	r2, [pc, #344]	; (8000be4 <MCAL_USART_Init+0x184>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d106      	bne.n	8000a9c <MCAL_USART_Init+0x3c>
		RCC_USART2_CLK_EN();
 8000a8e:	4b54      	ldr	r3, [pc, #336]	; (8000be0 <MCAL_USART_Init+0x180>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	4a53      	ldr	r2, [pc, #332]	; (8000be0 <MCAL_USART_Init+0x180>)
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a98:	61d3      	str	r3, [r2, #28]
 8000a9a:	e009      	b.n	8000ab0 <MCAL_USART_Init+0x50>
	else if(USARTx == USART3)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a52      	ldr	r2, [pc, #328]	; (8000be8 <MCAL_USART_Init+0x188>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d105      	bne.n	8000ab0 <MCAL_USART_Init+0x50>
		RCC_USART3_CLK_EN();
 8000aa4:	4b4e      	ldr	r3, [pc, #312]	; (8000be0 <MCAL_USART_Init+0x180>)
 8000aa6:	69db      	ldr	r3, [r3, #28]
 8000aa8:	4a4d      	ldr	r2, [pc, #308]	; (8000be0 <MCAL_USART_Init+0x180>)
 8000aaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aae:	61d3      	str	r3, [r2, #28]
//-------------------2-Enable USART MODULE------------------------------------------
	USARTx->USART_CR1 |= 1<<13 ;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	60da      	str	r2, [r3, #12]
//-------------------3-Enable USART Tx/Rx-------------------------------------------
	USARTx->USART_CR1 |= Gl_Config->USART_MODE ;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	4a45      	ldr	r2, [pc, #276]	; (8000bd8 <MCAL_USART_Init+0x178>)
 8000ac2:	6812      	ldr	r2, [r2, #0]
 8000ac4:	7812      	ldrb	r2, [r2, #0]
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	60da      	str	r2, [r3, #12]
//-------------------4-Payload Length-----------------------------------------------
	USARTx->USART_CR1 |= Gl_Config->USART_PAYLOAD_LENGTH ;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	4a41      	ldr	r2, [pc, #260]	; (8000bd8 <MCAL_USART_Init+0x178>)
 8000ad2:	6812      	ldr	r2, [r2, #0]
 8000ad4:	7a12      	ldrb	r2, [r2, #8]
 8000ad6:	431a      	orrs	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	60da      	str	r2, [r3, #12]
//-------------------5-Parity Config------------------------------------------------
	USARTx->USART_CR1 |= Gl_Config->USART_PARITY ;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	4a3d      	ldr	r2, [pc, #244]	; (8000bd8 <MCAL_USART_Init+0x178>)
 8000ae2:	6812      	ldr	r2, [r2, #0]
 8000ae4:	7a52      	ldrb	r2, [r2, #9]
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	60da      	str	r2, [r3, #12]
//-------------------6-Stop Bits Config------------------------------------------------
	USARTx->USART_CR2 |= Gl_Config->USART_STOP_BITS ;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	691b      	ldr	r3, [r3, #16]
 8000af0:	4a39      	ldr	r2, [pc, #228]	; (8000bd8 <MCAL_USART_Init+0x178>)
 8000af2:	6812      	ldr	r2, [r2, #0]
 8000af4:	7a92      	ldrb	r2, [r2, #10]
 8000af6:	431a      	orrs	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	611a      	str	r2, [r3, #16]
//-------------------7-Stop Bits Config------------------------------------------------
	USARTx->USART_CR3 = Gl_Config->USART_HW_FLOW_CONTROL;
 8000afc:	4b36      	ldr	r3, [pc, #216]	; (8000bd8 <MCAL_USART_Init+0x178>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	7adb      	ldrb	r3, [r3, #11]
 8000b02:	461a      	mov	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	615a      	str	r2, [r3, #20]
//-------------------8-BaudRate Configuration------------------------------------------
	uint32_t BRR , PCLK ;
	if(USARTx == USART1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a34      	ldr	r2, [pc, #208]	; (8000bdc <MCAL_USART_Init+0x17c>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d103      	bne.n	8000b18 <MCAL_USART_Init+0xb8>
	{
		PCLK = MCAL_RCC_Get_PCLK2_Freq();
 8000b10:	f7ff fd4e 	bl	80005b0 <MCAL_RCC_Get_PCLK2_Freq>
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	e002      	b.n	8000b1e <MCAL_USART_Init+0xbe>
	}
	else
	{
		PCLK = MCAL_RCC_Get_PCLK1_Freq();
 8000b18:	f7ff fd36 	bl	8000588 <MCAL_RCC_Get_PCLK1_Freq>
 8000b1c:	60f8      	str	r0, [r7, #12]
	}
	BRR = USART_BRR_REG(PCLK,Gl_Config->USART_BAUDRATE);
 8000b1e:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <MCAL_USART_Init+0x178>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	011b      	lsls	r3, r3, #4
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2c:	0119      	lsls	r1, r3, #4
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	4613      	mov	r3, r2
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	4413      	add	r3, r2
 8000b36:	009a      	lsls	r2, r3, #2
 8000b38:	441a      	add	r2, r3
 8000b3a:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <MCAL_USART_Init+0x178>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b46:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <MCAL_USART_Init+0x178>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	011b      	lsls	r3, r3, #4
 8000b4e:	68f8      	ldr	r0, [r7, #12]
 8000b50:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b54:	2064      	movs	r0, #100	; 0x64
 8000b56:	fb00 f303 	mul.w	r3, r0, r3
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	011b      	lsls	r3, r3, #4
 8000b5e:	4a23      	ldr	r2, [pc, #140]	; (8000bec <MCAL_USART_Init+0x18c>)
 8000b60:	fba2 2303 	umull	r2, r3, r2, r3
 8000b64:	095b      	lsrs	r3, r3, #5
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	430b      	orrs	r3, r1
 8000b6c:	60bb      	str	r3, [r7, #8]
	USARTx->USART_BRR = BRR ;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68ba      	ldr	r2, [r7, #8]
 8000b72:	609a      	str	r2, [r3, #8]
//-------------------9-USART INT enable/disable------------------------------------------
	if(Gl_Config->USART_IRQ_ENABLE != USART_IRQ_DIS)
 8000b74:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <MCAL_USART_Init+0x178>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	7b1b      	ldrb	r3, [r3, #12]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d027      	beq.n	8000bce <MCAL_USART_Init+0x16e>
	{
		USARTx->USART_CR1 |= Gl_Config->USART_IRQ_ENABLE ;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	4a15      	ldr	r2, [pc, #84]	; (8000bd8 <MCAL_USART_Init+0x178>)
 8000b84:	6812      	ldr	r2, [r2, #0]
 8000b86:	7b12      	ldrb	r2, [r2, #12]
 8000b88:	431a      	orrs	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	60da      	str	r2, [r3, #12]
//-------------------10-NVIC INT enable/disable------------------------------------------
			if(USARTx == USART1)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <MCAL_USART_Init+0x17c>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d106      	bne.n	8000ba4 <MCAL_USART_Init+0x144>
			{
				NVIC_IRQ37_USART1_EN();
 8000b96:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MCAL_USART_Init+0x190>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a15      	ldr	r2, [pc, #84]	; (8000bf0 <MCAL_USART_Init+0x190>)
 8000b9c:	f043 0320 	orr.w	r3, r3, #32
 8000ba0:	6013      	str	r3, [r2, #0]
				NVIC_IRQ39_USART3_EN();
			}
	}


}
 8000ba2:	e014      	b.n	8000bce <MCAL_USART_Init+0x16e>
			else if(USARTx == USART2)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	; (8000be4 <MCAL_USART_Init+0x184>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d106      	bne.n	8000bba <MCAL_USART_Init+0x15a>
				NVIC_IRQ38_USART2_EN();
 8000bac:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <MCAL_USART_Init+0x190>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <MCAL_USART_Init+0x190>)
 8000bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	e009      	b.n	8000bce <MCAL_USART_Init+0x16e>
			else if(USARTx == USART3)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <MCAL_USART_Init+0x188>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d105      	bne.n	8000bce <MCAL_USART_Init+0x16e>
				NVIC_IRQ39_USART3_EN();
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <MCAL_USART_Init+0x190>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <MCAL_USART_Init+0x190>)
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bcc:	6013      	str	r3, [r2, #0]
}
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2000003c 	.word	0x2000003c
 8000bdc:	40013800 	.word	0x40013800
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40004400 	.word	0x40004400
 8000be8:	40004800 	.word	0x40004800
 8000bec:	51eb851f 	.word	0x51eb851f
 8000bf0:	e000e104 	.word	0xe000e104

08000bf4 <MCAL_USART_Send_Data>:
		RCC_USART3_CLK_DIS();
		NVIC_IRQ39_USART3_DIS();
	}
}
void MCAL_USART_Send_Data(USART_Registers_t *USARTx , uint16_t *dataBuffer ,enum PollingMechanism PoolingEn)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	71fb      	strb	r3, [r7, #7]
	// wait until TxE is set {according to TRM procedure } -> at polling mechanism
	if( PoolingEn == Polling_Enable)
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d106      	bne.n	8000c16 <MCAL_USART_Send_Data+0x22>
	{
		while(!(USARTx->USART_SR&(1<<7))) ;
 8000c08:	bf00      	nop
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d0f9      	beq.n	8000c0a <MCAL_USART_Send_Data+0x16>
	{
		USARTx->USART_DR = (*dataBuffer & (uint16_t)0x1FF) ; // 9bits
	}
	else
	{
		USARTx->USART_DR = (*dataBuffer & (uint16_t)0xFF) ; // 8bits
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	881b      	ldrh	r3, [r3, #0]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	605a      	str	r2, [r3, #4]
	}

}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
	...

08000c2c <MCAL_USART_Recive_Data>:
void MCAL_USART_Wait_TC(USART_Registers_t *USARTx)
{
	while(!GET_BIT(USARTx->USART_SR,6)); // WAIT UNTIL ALL DATA TO BE SEND
}
void MCAL_USART_Recive_Data(USART_Registers_t *USARTx , uint16_t *dataBuffer ,enum PollingMechanism PoolingEn)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	4613      	mov	r3, r2
 8000c38:	71fb      	strb	r3, [r7, #7]
	// wait until RXNE is set {according to TRM procedure } -> at polling mechanism
		if( PoolingEn == Polling_Enable)
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d106      	bne.n	8000c4e <MCAL_USART_Recive_Data+0x22>
		{
			while(!(USARTx->USART_SR&(1<<5))) ;
 8000c40:	bf00      	nop
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f003 0320 	and.w	r3, r3, #32
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d0f9      	beq.n	8000c42 <MCAL_USART_Recive_Data+0x16>
				else
					*((uint16_t *)dataBuffer) = (USARTx->USART_DR & (uint8_t)0xFF );
		}
		else
		{
			if(Gl_Config->USART_PARITY == USART_PARITY_DIS)
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MCAL_USART_Recive_Data+0x54>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	7a5b      	ldrb	r3, [r3, #9]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d105      	bne.n	8000c64 <MCAL_USART_Recive_Data+0x38>
				*((uint16_t *)dataBuffer) = USARTx->USART_DR ;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	801a      	strh	r2, [r3, #0]
			else
				*((uint16_t *)dataBuffer) = (USARTx->USART_DR & (uint8_t)0x7F );
		}

}
 8000c62:	e007      	b.n	8000c74 <MCAL_USART_Recive_Data+0x48>
				*((uint16_t *)dataBuffer) = (USARTx->USART_DR & (uint8_t)0x7F );
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	801a      	strh	r2, [r3, #0]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	2000003c 	.word	0x2000003c

08000c84 <MCAL_USART_Set_GPIO_Pins>:

//Set GPIO pins -> Recomended setting for uart in TRM [PIN ALTERNATIVE TABLE]
void MCAL_USART_Set_GPIO_Pins(USART_Registers_t *USARTx)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Config_t USART_Pin_Config ;
	if(USARTx == USART1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a2c      	ldr	r2, [pc, #176]	; (8000d40 <MCAL_USART_Set_GPIO_Pins+0xbc>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d118      	bne.n	8000cc6 <MCAL_USART_Set_GPIO_Pins+0x42>
		//PA10 -> RX
		//PA11 -> CTS
		//PA12 -> RTS

		//1-Set Tx pin :
		USART_Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN9 ;
 8000c94:	2309      	movs	r3, #9
 8000c96:	81bb      	strh	r3, [r7, #12]
		USART_Pin_Config.GPIO_PIN_MODE = AFIO_OUTPUT_PP ;
 8000c98:	2306      	movs	r3, #6
 8000c9a:	73bb      	strb	r3, [r7, #14]
		USART_Pin_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &USART_Pin_Config);
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4827      	ldr	r0, [pc, #156]	; (8000d44 <MCAL_USART_Set_GPIO_Pins+0xc0>)
 8000ca8:	f7ff fbc4 	bl	8000434 <MCAL_GPIO_Init>
		//2-Set Rx pin :
		USART_Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN10 ;
 8000cac:	230a      	movs	r3, #10
 8000cae:	81bb      	strh	r3, [r7, #12]
		USART_Pin_Config.GPIO_PIN_MODE = AFIO_INPUT ;
 8000cb0:	2308      	movs	r3, #8
 8000cb2:	73bb      	strb	r3, [r7, #14]
		USART_Pin_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &USART_Pin_Config);
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4821      	ldr	r0, [pc, #132]	; (8000d44 <MCAL_USART_Set_GPIO_Pins+0xc0>)
 8000cc0:	f7ff fbb8 	bl	8000434 <MCAL_GPIO_Init>
					MCAL_GPIO_Init(GPIOA, &USART_Pin_Config);
				}

	}

}
 8000cc4:	e038      	b.n	8000d38 <MCAL_USART_Set_GPIO_Pins+0xb4>
	else if(USARTx == USART1)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a1d      	ldr	r2, [pc, #116]	; (8000d40 <MCAL_USART_Set_GPIO_Pins+0xbc>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d118      	bne.n	8000d00 <MCAL_USART_Set_GPIO_Pins+0x7c>
			USART_Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN2 ;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	81bb      	strh	r3, [r7, #12]
			USART_Pin_Config.GPIO_PIN_MODE = AFIO_OUTPUT_PP ;
 8000cd2:	2306      	movs	r3, #6
 8000cd4:	73bb      	strb	r3, [r7, #14]
			USART_Pin_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &USART_Pin_Config);
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4818      	ldr	r0, [pc, #96]	; (8000d44 <MCAL_USART_Set_GPIO_Pins+0xc0>)
 8000ce2:	f7ff fba7 	bl	8000434 <MCAL_GPIO_Init>
			USART_Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN3 ;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	81bb      	strh	r3, [r7, #12]
			USART_Pin_Config.GPIO_PIN_MODE = AFIO_INPUT ;
 8000cea:	2308      	movs	r3, #8
 8000cec:	73bb      	strb	r3, [r7, #14]
			USART_Pin_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &USART_Pin_Config);
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4812      	ldr	r0, [pc, #72]	; (8000d44 <MCAL_USART_Set_GPIO_Pins+0xc0>)
 8000cfa:	f7ff fb9b 	bl	8000434 <MCAL_GPIO_Init>
}
 8000cfe:	e01b      	b.n	8000d38 <MCAL_USART_Set_GPIO_Pins+0xb4>
	else if(USARTx == USART1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a0f      	ldr	r2, [pc, #60]	; (8000d40 <MCAL_USART_Set_GPIO_Pins+0xbc>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d117      	bne.n	8000d38 <MCAL_USART_Set_GPIO_Pins+0xb4>
				USART_Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN10 ;
 8000d08:	230a      	movs	r3, #10
 8000d0a:	81bb      	strh	r3, [r7, #12]
				USART_Pin_Config.GPIO_PIN_MODE = AFIO_OUTPUT_PP ;
 8000d0c:	2306      	movs	r3, #6
 8000d0e:	73bb      	strb	r3, [r7, #14]
				USART_Pin_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ;
 8000d10:	2301      	movs	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &USART_Pin_Config);
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480a      	ldr	r0, [pc, #40]	; (8000d44 <MCAL_USART_Set_GPIO_Pins+0xc0>)
 8000d1c:	f7ff fb8a 	bl	8000434 <MCAL_GPIO_Init>
				USART_Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN11 ;
 8000d20:	230b      	movs	r3, #11
 8000d22:	81bb      	strh	r3, [r7, #12]
				USART_Pin_Config.GPIO_PIN_MODE = AFIO_INPUT ;
 8000d24:	2308      	movs	r3, #8
 8000d26:	73bb      	strb	r3, [r7, #14]
				USART_Pin_Config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &USART_Pin_Config);
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	4619      	mov	r1, r3
 8000d32:	4804      	ldr	r0, [pc, #16]	; (8000d44 <MCAL_USART_Set_GPIO_Pins+0xc0>)
 8000d34:	f7ff fb7e 	bl	8000434 <MCAL_GPIO_Init>
}
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40013800 	.word	0x40013800
 8000d44:	40010800 	.word	0x40010800

08000d48 <USART1_IRQHandler>:

//=================================================================
//					      USART ISR
//=================================================================
void USART1_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	Gl_Config->call_back_ptr();
 8000d4c:	4b02      	ldr	r3, [pc, #8]	; (8000d58 <USART1_IRQHandler+0x10>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	691b      	ldr	r3, [r3, #16]
 8000d52:	4798      	blx	r3
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2000003c 	.word	0x2000003c

08000d5c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	Gl_Config->call_back_ptr();
 8000d60:	4b02      	ldr	r3, [pc, #8]	; (8000d6c <USART2_IRQHandler+0x10>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	691b      	ldr	r3, [r3, #16]
 8000d66:	4798      	blx	r3
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	2000003c 	.word	0x2000003c

08000d70 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
	Gl_Config->call_back_ptr;
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <CLK_init>:
#include"MCAL/RCC/RCC.h"
#include"MCAL/USART/USART.h"
#include"MCAL/SPI/SPI.h"

void CLK_init()
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
	// Enable Clock for GPIOA
	RCC_GPIOA_CLK_EN();
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <CLK_init+0x30>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4a09      	ldr	r2, [pc, #36]	; (8000dac <CLK_init+0x30>)
 8000d86:	f043 0304 	orr.w	r3, r3, #4
 8000d8a:	6193      	str	r3, [r2, #24]
	// Enable Clock for GPIOB
	RCC_GPIOB_CLK_EN();
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <CLK_init+0x30>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a06      	ldr	r2, [pc, #24]	; (8000dac <CLK_init+0x30>)
 8000d92:	f043 0308 	orr.w	r3, r3, #8
 8000d96:	6193      	str	r3, [r2, #24]
	//RCC ENABLE FOR EXTI
	RCC_AFIO_CLK_EN();
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <CLK_init+0x30>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	4a03      	ldr	r2, [pc, #12]	; (8000dac <CLK_init+0x30>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6193      	str	r3, [r2, #24]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	40021000 	.word	0x40021000

08000db0 <USART_IRQ_Callback>:
uint8_t recived_data ;

void USART_IRQ_Callback(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	MCAL_USART_Recive_Data(USART1, &recived_data, Polling_Disable);
 8000db4:	2200      	movs	r2, #0
 8000db6:	490d      	ldr	r1, [pc, #52]	; (8000dec <USART_IRQ_Callback+0x3c>)
 8000db8:	480d      	ldr	r0, [pc, #52]	; (8000df0 <USART_IRQ_Callback+0x40>)
 8000dba:	f7ff ff37 	bl	8000c2c <MCAL_USART_Recive_Data>
	MCAL_USART_Send_Data(USART1, &recived_data, Polling_Disable);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	490a      	ldr	r1, [pc, #40]	; (8000dec <USART_IRQ_Callback+0x3c>)
 8000dc2:	480b      	ldr	r0, [pc, #44]	; (8000df0 <USART_IRQ_Callback+0x40>)
 8000dc4:	f7ff ff16 	bl	8000bf4 <MCAL_USART_Send_Data>
	//send data to SPI
	MCAL_GPIO_Pin_Write(GPIOA, GPIO_PIN4, GPIO_PIN_LOW);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2104      	movs	r1, #4
 8000dcc:	4809      	ldr	r0, [pc, #36]	; (8000df4 <USART_IRQ_Callback+0x44>)
 8000dce:	f7ff fbb6 	bl	800053e <MCAL_GPIO_Pin_Write>
	MCAL_SPI_Tx_Rx_Data(SPI1, &recived_data, Polling_Enable);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	4905      	ldr	r1, [pc, #20]	; (8000dec <USART_IRQ_Callback+0x3c>)
 8000dd6:	4808      	ldr	r0, [pc, #32]	; (8000df8 <USART_IRQ_Callback+0x48>)
 8000dd8:	f7ff fd1a 	bl	8000810 <MCAL_SPI_Tx_Rx_Data>
	MCAL_GPIO_Pin_Write(GPIOA, GPIO_PIN4, GPIO_PIN_HIGH);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2104      	movs	r1, #4
 8000de0:	4804      	ldr	r0, [pc, #16]	; (8000df4 <USART_IRQ_Callback+0x44>)
 8000de2:	f7ff fbac 	bl	800053e <MCAL_GPIO_Pin_Write>
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000007c 	.word	0x2000007c
 8000df0:	40013800 	.word	0x40013800
 8000df4:	40010800 	.word	0x40010800
 8000df8:	40013000 	.word	0x40013000

08000dfc <main>:
int main()
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08c      	sub	sp, #48	; 0x30
 8000e00:	af00      	add	r7, sp, #0
	CLK_init();
 8000e02:	f7ff ffbb 	bl	8000d7c <CLK_init>

//***********************USAT initialization*****************************
	USART_Config_t MyUART ;
	MyUART.USART_BAUDRATE = USART_BAUDRATE_115200 ;
 8000e06:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000e0a:	623b      	str	r3, [r7, #32]
	MyUART.USART_HW_FLOW_CONTROL = USART_NO_FLOW_CONTROL ;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	MyUART.USART_IRQ_ENABLE = USART_IRQ_RXNE_INT ;
 8000e12:	2320      	movs	r3, #32
 8000e14:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	MyUART.USART_MODE = USART_RX_TX_MODE ;
 8000e18:	230c      	movs	r3, #12
 8000e1a:	773b      	strb	r3, [r7, #28]
	MyUART.USART_PARITY = USART_PARITY_DIS ;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	MyUART.USART_PAYLOAD_LENGTH = USART_PAYLOAD_8B ;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	MyUART.USART_STOP_BITS = USART_ONE_STOP_BIT ;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	MyUART.call_back_ptr = USART_IRQ_Callback ;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <main+0xa4>)
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
	MCAL_USART_Init(USART1, &MyUART);
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	4619      	mov	r1, r3
 8000e38:	481a      	ldr	r0, [pc, #104]	; (8000ea4 <main+0xa8>)
 8000e3a:	f7ff fe11 	bl	8000a60 <MCAL_USART_Init>
	MCAL_USART_Set_GPIO_Pins(USART1);
 8000e3e:	4819      	ldr	r0, [pc, #100]	; (8000ea4 <main+0xa8>)
 8000e40:	f7ff ff20 	bl	8000c84 <MCAL_USART_Set_GPIO_Pins>

//***********************SPI initialization*****************************
	SPI_Config_t MySPI ;
	//common config for both master & slave
	MySPI.Clk_Phase = SPI_CLK_PHASE_SECOND_EDGE_CAPTURE ;
 8000e44:	2301      	movs	r3, #1
 8000e46:	81fb      	strh	r3, [r7, #14]
	MySPI.Clk_Polarity = SPI_CLK_POL_ONE_IDLE ;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	81bb      	strh	r3, [r7, #12]
	MySPI.Data_Size = SPI_DATA_8BIT_MODE ;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	817b      	strh	r3, [r7, #10]
	MySPI.Frame_Format = SPI_MSB_FIRIST ;
 8000e50:	2300      	movs	r3, #0
 8000e52:	813b      	strh	r3, [r7, #8]
	MySPI.Prescaller = SPI_PRESCALLER_8 ;
 8000e54:	2310      	movs	r3, #16
 8000e56:	827b      	strh	r3, [r7, #18]
	MySPI.Comm_Mode = SPI_DIRECTION_2LINES ;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	80fb      	strh	r3, [r7, #6]
#ifdef MCU_ACT_AS_MASTER
	MySPI.Device_Mode = SPI_MASTER ;
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	80bb      	strh	r3, [r7, #4]
	MySPI.IRQEn = SPI_IRQ_DIS ;
 8000e60:	2300      	movs	r3, #0
 8000e62:	82bb      	strh	r3, [r7, #20]
	MySPI.NSS = SPI_NSS_SW_SSI_SET ;
 8000e64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e68:	823b      	strh	r3, [r7, #16]
	MySPI.Call_Back_Ptr = NULL ;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
#endif
	MCAL_SPI_Init(SPI1, &MySPI);
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	4619      	mov	r1, r3
 8000e72:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <main+0xac>)
 8000e74:	f7ff fc3e 	bl	80006f4 <MCAL_SPI_Init>
	MCAL_SPI_Set_GPIO(SPI1);
 8000e78:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <main+0xac>)
 8000e7a:	f7ff fcf3 	bl	8000864 <MCAL_SPI_Set_GPIO>


//configure SS on PORTA PIN4 BY GPIO
	GPIO_Pin_Config_t MyGPIO ;
	MyGPIO.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	70fb      	strb	r3, [r7, #3]
	MyGPIO.GPIO_PIN_NUMBER = GPIO_PIN4 ;
 8000e82:	2304      	movs	r3, #4
 8000e84:	803b      	strh	r3, [r7, #0]
	MyGPIO.GPIO_PIN_MODE = GPIO_OUTPUT_PP;
 8000e86:	2304      	movs	r3, #4
 8000e88:	70bb      	strb	r3, [r7, #2]
	MCAL_GPIO_Init(GPIOA, &MyGPIO);
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4807      	ldr	r0, [pc, #28]	; (8000eac <main+0xb0>)
 8000e90:	f7ff fad0 	bl	8000434 <MCAL_GPIO_Init>
	MCAL_GPIO_Pin_Write(GPIOA, GPIO_PIN4, GPIO_PIN_HIGH);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2104      	movs	r1, #4
 8000e98:	4804      	ldr	r0, [pc, #16]	; (8000eac <main+0xb0>)
 8000e9a:	f7ff fb50 	bl	800053e <MCAL_GPIO_Pin_Write>

	while(1)
 8000e9e:	e7fe      	b.n	8000e9e <main+0xa2>
 8000ea0:	08000db1 	.word	0x08000db1
 8000ea4:	40013800 	.word	0x40013800
 8000ea8:	40013000 	.word	0x40013000
 8000eac:	40010800 	.word	0x40010800

08000eb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000eb0:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eb2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000eb4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <LoopForever+0x6>)
  ldr r1, =_edata
 8000eba:	490d      	ldr	r1, [pc, #52]	; (8000ef0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <LoopForever+0xe>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec0:	e002      	b.n	8000ec8 <LoopCopyDataInit>

08000ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec6:	3304      	adds	r3, #4

08000ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ecc:	d3f9      	bcc.n	8000ec2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ed0:	4c0a      	ldr	r4, [pc, #40]	; (8000efc <LoopForever+0x16>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed4:	e001      	b.n	8000eda <LoopFillZerobss>

08000ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed8:	3204      	adds	r2, #4

08000eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000edc:	d3fb      	bcc.n	8000ed6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ede:	f000 f811 	bl	8000f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ee2:	f7ff ff8b 	bl	8000dfc <main>

08000ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ee6:	e7fe      	b.n	8000ee6 <LoopForever>
  ldr   r0, =_estack
 8000ee8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000ef4:	08000f6c 	.word	0x08000f6c
  ldr r2, =_sbss
 8000ef8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000efc:	20000080 	.word	0x20000080

08000f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <ADC1_2_IRQHandler>
	...

08000f04 <__libc_init_array>:
 8000f04:	b570      	push	{r4, r5, r6, lr}
 8000f06:	2500      	movs	r5, #0
 8000f08:	4e0c      	ldr	r6, [pc, #48]	; (8000f3c <__libc_init_array+0x38>)
 8000f0a:	4c0d      	ldr	r4, [pc, #52]	; (8000f40 <__libc_init_array+0x3c>)
 8000f0c:	1ba4      	subs	r4, r4, r6
 8000f0e:	10a4      	asrs	r4, r4, #2
 8000f10:	42a5      	cmp	r5, r4
 8000f12:	d109      	bne.n	8000f28 <__libc_init_array+0x24>
 8000f14:	f000 f81a 	bl	8000f4c <_init>
 8000f18:	2500      	movs	r5, #0
 8000f1a:	4e0a      	ldr	r6, [pc, #40]	; (8000f44 <__libc_init_array+0x40>)
 8000f1c:	4c0a      	ldr	r4, [pc, #40]	; (8000f48 <__libc_init_array+0x44>)
 8000f1e:	1ba4      	subs	r4, r4, r6
 8000f20:	10a4      	asrs	r4, r4, #2
 8000f22:	42a5      	cmp	r5, r4
 8000f24:	d105      	bne.n	8000f32 <__libc_init_array+0x2e>
 8000f26:	bd70      	pop	{r4, r5, r6, pc}
 8000f28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f2c:	4798      	blx	r3
 8000f2e:	3501      	adds	r5, #1
 8000f30:	e7ee      	b.n	8000f10 <__libc_init_array+0xc>
 8000f32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f36:	4798      	blx	r3
 8000f38:	3501      	adds	r5, #1
 8000f3a:	e7f2      	b.n	8000f22 <__libc_init_array+0x1e>
 8000f3c:	08000f64 	.word	0x08000f64
 8000f40:	08000f64 	.word	0x08000f64
 8000f44:	08000f64 	.word	0x08000f64
 8000f48:	08000f68 	.word	0x08000f68

08000f4c <_init>:
 8000f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4e:	bf00      	nop
 8000f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f52:	bc08      	pop	{r3}
 8000f54:	469e      	mov	lr, r3
 8000f56:	4770      	bx	lr

08000f58 <_fini>:
 8000f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5a:	bf00      	nop
 8000f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f5e:	bc08      	pop	{r3}
 8000f60:	469e      	mov	lr, r3
 8000f62:	4770      	bx	lr
